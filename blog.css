create or replace PROCEDURE PRO_EDI_BAPLIE(P_FILENAME IN VARCHAR2,
                                           DEBUG      IN VARCHAR2 := '0') IS

  -- FILE DECLARE
  SFILE_HANDLE    UTL_FILE.FILE_TYPE;
  V_FILEDIRECTORY VARCHAR2(100) := '';
  V_RECNAME       VARCHAR2(5);
  V_NEWLINE       VARCHAR2(1000);

  V_NEST_CONT_LIST VARCHAR2(200) := '';
  V_NEST_CONT      VARCHAR2(20) := '';
  I                NUMBER := 0;
  N                NUMBER := 0;

  /* TABLE COLUMN DECLARE (BAPLIE HEADER AND REC01)  */
  TYPE HEADREC IS RECORD(
    H01 ETV_BAPLIE.ETV_BAP_DOCNAME%TYPE,
    H02 ETV_BAPLIE.ETV_BAP_DOCNO%TYPE,
    H03 ETV_BAPLIE.ETV_BAP_DOCSEND%TYPE,
    H04 ETV_BAPLIE.ETV_BAP_DOCRECV%TYPE,
    H05 ETV_BAPLIE.ETV_BAP_VERSION%TYPE,
    
    R01 ETV_BAPLIE.ETV_BAP_DOCCODE%TYPE,
    R02 ETV_BAPLIE.ETV_BAP_DOCNUMB%TYPE,
    R03 ETV_BAPLIE.ETV_BAP_MSGCODE%TYPE,
    R04 ETV_BAPLIE.ETV_BAP_MSGLOGDATE%TYPE,
    R05 ETV_BAPLIE.ETV_BAP_VESSSAIL%TYPE,
    R06 ETV_BAPLIE.ETV_BAP_CALLSIGN%TYPE,
    R07 ETV_BAPLIE.ETV_BAP_LOYDCODE%TYPE,
    R08 ETV_BAPLIE.ETV_BAP_VESSNAME%TYPE,
    R09 ETV_BAPLIE.ETV_BAP_DEPTPORT%TYPE,
    R10 ETV_BAPLIE.ETV_BAP_CALLPORT%TYPE,
    R11 ETV_BAPLIE.ETV_BAP_ACTARRV%TYPE,
    R12 ETV_BAPLIE.ETV_BAP_ESTARRV%TYPE,
    R13 ETV_BAPLIE.ETV_BAP_ESTDEPT%TYPE,
    R14 ETV_BAPLIE.ETV_BAP_ACTDEPT%TYPE,
    R15 ETV_BAPLIE.ETV_BAP_LOADVOY%TYPE,
    R16 ETV_BAPLIE.ETV_BAP_VESSEL%TYPE,
    R17 ETV_BAPLIE.ETV_BAP_VOYAGE%TYPE);
  /* TABLE COLUMN DECLARE (BAPLIE CONTAINER REC02)  */
  TYPE CONTDATA IS RECORD(
    M01 ETV_BAPLIE_CONT.ETV_CBAP_DOCSEND%TYPE := '',
    M02 ETV_BAPLIE_CONT.ETV_CBAP_VESSEL%TYPE := '',
    M03 ETV_BAPLIE_CONT.ETV_CBAP_VOYAGE%TYPE := '', -- KEY FIELD
    
    F03 ETV_BAPLIE_CONT.ETV_CBAP_CONTSTWG%TYPE := '',
    F04 ETV_BAPLIE_CONT.ETV_CBAP_GROSWQAL%TYPE := '',
    F05 ETV_BAPLIE_CONT.ETV_CBAP_GROSWGHT%TYPE := '',
    F06 ETV_BAPLIE_CONT.ETV_CBAP_OLENFQAL%TYPE := '',
    F07 ETV_BAPLIE_CONT.ETV_CBAP_OLENFRNT%TYPE := '',
    F08 ETV_BAPLIE_CONT.ETV_CBAP_OLENBQAL%TYPE := '',
    F09 ETV_BAPLIE_CONT.ETV_CBAP_OLENBACK%TYPE := '',
    F10 ETV_BAPLIE_CONT.ETV_CBAP_OWIDLQAL%TYPE := '',
    F11 ETV_BAPLIE_CONT.ETV_CBAP_OWIDLEFT%TYPE := '',
    F12 ETV_BAPLIE_CONT.ETV_CBAP_OWIDRQAL%TYPE := '',
    F13 ETV_BAPLIE_CONT.ETV_CBAP_OWIDRGHT%TYPE := '',
    F14 ETV_BAPLIE_CONT.ETV_CBAP_OVERHQAL%TYPE := '',
    F15 ETV_BAPLIE_CONT.ETV_CBAP_OVERHIGH%TYPE := '',
    F16 ETV_BAPLIE_CONT.ETV_CBAP_TMPRQULF%TYPE := '',
    F17 ETV_BAPLIE_CONT.ETV_CBAP_TMPRCONT%TYPE := '',
    F18 ETV_BAPLIE_CONT.ETV_CBAP_TMPRMIN%TYPE := '',
    F19 ETV_BAPLIE_CONT.ETV_CBAP_TMPRMAX%TYPE := '',
    F20 ETV_BAPLIE_CONT.ETV_CBAP_ORGNPORT%TYPE := '',
    F21 ETV_BAPLIE_CONT.ETV_CBAP_DCHGPORT%TYPE := '',
    F22 ETV_BAPLIE_CONT.ETV_CBAP_DESTPORT%TYPE := '',
    F23 ETV_BAPLIE_CONT.ETV_CBAP_REFNVLBM%TYPE := '',
    F24 ETV_BAPLIE_CONT.ETV_CBAP_REFNVLET%TYPE := '',
    F25 ETV_BAPLIE_CONT.ETV_CBAP_CONTQULF%TYPE := '',
    F26 ETV_BAPLIE_CONT.ETV_CBAP_CONTNO%TYPE := '',
    F27 ETV_BAPLIE_CONT.ETV_CBAP_CONTISO%TYPE := '',
    F28 ETV_BAPLIE_CONT.ETV_CBAP_FULLEMPT%TYPE := '',
    F29 ETV_BAPLIE_CONT.ETV_CBAP_CLASS%TYPE := '',
    F30 ETV_BAPLIE_CONT.ETV_CBAP_ATCHQAL1%TYPE := '',
    F31 ETV_BAPLIE_CONT.ETV_CBAP_ATCHVAL1%TYPE := '',
    F32 ETV_BAPLIE_CONT.ETV_CBAP_ATCHQAL2%TYPE := '',
    F33 ETV_BAPLIE_CONT.ETV_CBAP_ATCHVAL2%TYPE := '',
    F34 ETV_BAPLIE_CONT.ETV_CBAP_ATCHQAL3%TYPE := '',
    F35 ETV_BAPLIE_CONT.ETV_CBAP_ATCHVAL3%TYPE := '',
    F36 ETV_BAPLIE_CONT.ETV_CBAP_ATCHQAL4%TYPE := '',
    F37 ETV_BAPLIE_CONT.ETV_CBAP_ATCHVAL4%TYPE := '',
    F38 ETV_BAPLIE_CONT.ETV_CBAP_ATCHQAL5%TYPE := '',
    F39 ETV_BAPLIE_CONT.ETV_CBAP_ATCHVAL5%TYPE := '',
    F40 ETV_BAPLIE_CONT.ETV_CBAP_DNGRIMDG%TYPE := '',
    F41 ETV_BAPLIE_CONT.ETV_CBAP_IMDGPAGE%TYPE := '',
    F42 ETV_BAPLIE_CONT.ETV_CBAP_DNGRUNNO%TYPE := '',
    F43 ETV_BAPLIE_CONT.ETV_CBAP_DNGRFQUL%TYPE := '',
    F44 ETV_BAPLIE_CONT.ETV_CBAP_DNGRFLSH%TYPE := '',
    F45 ETV_BAPLIE_CONT.ETV_CBAP_DNGRPACK%TYPE := '',
    F46 ETV_BAPLIE_CONT.ETV_CBAP_DNGREMS%TYPE := '',
    F47 ETV_BAPLIE_CONT.ETV_CBAP_DNGRMFAG%TYPE := '',
    F48 ETV_BAPLIE_CONT.ETV_CBAP_CONTOPER%TYPE := '',
    F49 ETV_BAPLIE_CONT.ETV_CBAP_OVERSLOT%TYPE := '',
    F50 ETV_BAPLIE_CONT.ETV_CBAP_CONTCOMM%TYPE := '',
    F51 ETV_BAPLIE_CONT.ETV_CBAP_SHFTSTWG%TYPE := '',
    F52 ETV_BAPLIE_CONT.ETV_CBAP_DNGRFIRE%TYPE := '',
    F53 ETV_BAPLIE_CONT.ETV_CBAP_CONTRMKS%TYPE := '',
    F54 ETV_BAPLIE_CONT.ETV_CBAP_CONTTYPE%TYPE := '',
    F55 ETV_BAPLIE_CONT.ETV_CBAP_TRCKCODE%TYPE := '',
    F56 ETV_BAPLIE_CONT.ETV_CBAP_SPECIALTYPE%TYPE := '',
    F57 ETV_BAPLIE_CONT.ETV_CBAP_DAMAGE%TYPE := '',
    F58 ETV_BAPLIE_CONT.ETV_CBAP_RECVDATE%TYPE := '',
    F59 ETV_BAPLIE_CONT.ETV_CBAP_RECVTIME%TYPE := '',
    F60 ETV_BAPLIE_CONT.ETV_CBAP_NESTCHK%TYPE := '',
    F61 ETV_BAPLIE_CONT.ETV_CBAP_NESTCONT%TYPE := '',
    F62 ETV_BAPLIE_CONT.ETV_CBAP_POR%TYPE := '',
    F63 ETV_BAPLIE_CONT.ETV_CBAP_NEXTPORT%TYPE := '',
    
    /* 2016.05.17 VGM ADD - 9015707 */
    F71 ETV_BAPLIE_CONT.MEAS_WGT%TYPE := '',
    F72 ETV_BAPLIE_CONT.MEAS_MZD_CD%TYPE := '',
    F73 ETV_BAPLIE_CONT.MEAS_CERTI_NO%TYPE := '',
    F74 ETV_BAPLIE_CONT.MEAS_DT%TYPE := '',
    F75 ETV_BAPLIE_CONT.MEAS_PSON_SIG1%TYPE := '',
    F76 ETV_BAPLIE_CONT.MEAS_PSON_SIG2%TYPE := '',
    F77 ETV_BAPLIE_CONT.MEAS_PSON_SIG3%TYPE := '',
    F78 ETV_BAPLIE_CONT.MEAS_PSON_SIG4%TYPE := '');

  /* ERROR LIST  */
  VERRFILE  ETC_ERRLOG.ETC_ER_LOGFILE%TYPE;
  VMESSAGE  ETC_ERRLOG.ETC_ER_EDOCID%TYPE := '';
  VCONTSTOW ETC_ERRLOG.ETC_ER_CSNAME%TYPE := '';
  TYPE ERROR_LOG IS RECORD(
    VDATA    ETC_ERRLOG.ETC_ER_DATA%TYPE := '',
    VERRINFO ETC_ERRLOG.ETC_ER_INFO%TYPE := '',
    VERRDESC ETC_ERRLOG.ETC_ER_DESC%TYPE := '',
    VERRMSG  ETC_ERRLOG.ETC_ER_MESSAGE%TYPE := '');

  /* ERROR HEADER/REC01 PART  */
  TYPE ERROR_HEADREC IS RECORD(
    EHN01 VARCHAR2(30) := '',
    EHN02 VARCHAR2(30) := '',
    EHN03 VARCHAR2(30) := '',
    EHN04 VARCHAR2(30) := '',
    
    EHD01 VARCHAR2(3) := '',
    EHD02 VARCHAR2(3) := '',
    EHD03 VARCHAR2(3) := '',
    EHD04 VARCHAR2(3) := '');

  /* ERROR REC02 CONTAINER PART  */
  TYPE ERROR_CONTAINER IS RECORD(
    ECN01 VARCHAR2(30) := '',
    ECN02 VARCHAR2(30) := '',
    ECN03 VARCHAR2(30) := '',
    ECN04 VARCHAR2(30) := '',
    ECN05 VARCHAR2(30) := '',
    ECN06 VARCHAR2(30) := '',
    ECN07 VARCHAR2(30) := '',
    ECN08 VARCHAR2(30) := '',
    ECN09 VARCHAR2(30) := '',
    
    ECD01 VARCHAR2(3) := '',
    ECD02 VARCHAR2(3) := '',
    ECD03 VARCHAR2(3) := '',
    ECD04 VARCHAR2(3) := '',
    ECD05 VARCHAR2(3) := '',
    ECD06 VARCHAR2(3) := '',
    ECD07 VARCHAR2(3) := '',
    ECD08 VARCHAR2(3) := '',
    ECD09 VARCHAR2(3) := '');

  /*--- RECORD DECLARE ---*/
  HREC   HEADREC; -- HEAD/REC01(BAPLIE PARENT)
  CREC   CONTDATA; -- REC02(CONTAINER) (BAPLIE CHILD)
  ERRLOG ERROR_LOG; -- ERROR LIST(LOG)

  ERR_HREC ERROR_HEADREC; -- ERROR HEAD/REC01
  ERR_CREC ERROR_CONTAINER; -- ERROR_CONTAINER

  --  GENERAL DECLARE
  GERRHEAD BOOLEAN NOT NULL := TRUE; -- HEADER/REC01 ERROR CHECK
  GERRPART BOOLEAN NOT NULL := TRUE; -- REC02 ERROR CHECK

  RCNT      NATURAL := 0; -- RECEIVED CONTAINER COUNT
  PCNT      NATURAL := 0; -- PROCESSED CONTAINER COUNT
  XFILESTAT VARCHAR2(3) := ''; -- FILE STATUS
  XACCDATE  CHAR(8) := ''; -- ACCESSED DATA
  XACCTIME  CHAR(6) := ''; -- ACCESSED TIME
  SMOVEFLAG CHAR(1) := 'W'; -- MOVEFLAG

  GLOCALPORT CHAR(5) := ''; -- LOCAL PORT

  GVESSEL  VARCHAR2(30) := ''; -- VESSEL/VOYAGE/STATUS
  GVSLVOY  VARCHAR2(30) := ''; -- VESSEL/VOY/YEAR
  GVSLCODE VARCHAR2(4) := ''; -- VESSEL CODE
  GVOYAGE  VARCHAR2(17) := ''; -- VOYAGE NUMBER

  PERRORSQL VARCHAR2(7) := ''; -- SQL(SELECT ERROR LOG TABLE )
  CERRORSQL VARCHAR2(7) := ''; -- SQL(SELECT ERROR DATA LOG TABLE )

  PSHIPPLANSQL VARCHAR2(30) := ''; -- SQL(SELECT SHIPPLAN TABLE PARENT)
  CPLANCONTSQL VARCHAR2(17) := ''; -- SQL(SELECT SHIPPLAN DISCHARGE CONTAINER)

  PBAPLIESQL VARCHAR2(30) := ''; -- SQL(SELECT BAPLIE TABLE PARENT)
  CBAPLIESQL VARCHAR2(50) := ''; -- SQL(SELECT BAPLIE TABLE CHILD)

  GSTOWAGE    VARCHAR2(7) := ''; -- STOWAGE
  GREALSTOW   NATURAL := 100000; -- STOWAGE CONVERT(0000000)
  GCONT       VARCHAR2(17) := ''; -- CONTAINER NO
  GISO        VARCHAR2(10) := ''; -- ISO CODE
  GPORT       VARCHAR2(5) := ''; -- PORT CODE
  GOPER       VARCHAR2(3) := ''; -- OPERATOR CODE
  XPORTINSERT VARCHAR2(1) := ''; -- PORT (FLAT=Y)

  GOVERCONT VARCHAR2(17) := ''; -- OVERSLOT CONTAINER NO
  GLEADSTOW VARCHAR2(7) := ''; -- LEADING STOWAGE
  GOVERRET  VARCHAR2(20) := ''; -- OVERSLOT CHECK(RETURN)
  GOVERCHK  VARCHAR2(1) := ''; -- OVERSLOT FLAG CHECK(F/B/L/R/T)
  GCNTOVER  VARCHAR2(7) := ''; -- OVERSLOT COUNT
  XOVER     VARCHAR2(20) := ''; -- OVERSLOT DESCRIPTION
  XFCNT     VARCHAR2(7) := ''; -- OVERSLOT FRONT
  XBCNT     VARCHAR2(7) := ''; -- BACK
  XLCNT     VARCHAR2(7) := ''; -- LEFT
  XRCNT     VARCHAR2(7) := ''; -- RIGHT
  XTCNT     VARCHAR2(7) := ''; -- TIER
  XOVERFLAG BOOLEAN NOT NULL := TRUE; -- OVERSLOT FLAG(TRUE OR FALSE)
  GPOR      VARCHAR2(5) := ''; -- PORT OF ORIGIN

  --  GENERAL DECLARE
  GCONFIRM   CHAR(1) := ''; -- BAPLIE CONFIRM(SHIP PLAN)
  GPLANCHECK NUMBER := 0; -- DISCHARGE PLAN CHECK
  GREALBAY   VARCHAR2(3) := ''; -- REAL BAY

  GVESSELDEF NUMBER := 0; -- VESSEL DEFINE CHECK

  --  SHIP PLAN DISCHARGE DECLARE(VSP_SHIP)
  GEXTJOB    VARCHAR2(3) := ''; -- EXTERNAL JOBBAY
  GDH        VARCHAR2(1) := ''; -- DECH/HOLD
  GINTSTOW   VARCHAR2(8) := ''; -- EXTERNAL STOWAGE
  GDIRECT    VARCHAR2(2) := ''; -- DIRECT(DD,DL)
  GWEIGHT    VARCHAR2(10) := ''; -- WEIGHT
  GTEMPER    VARCHAR2(7) := ''; -- TEMPERATURE
  GOVERVALUE VARCHAR2(40) := ''; -- OVERSLOT FLAG CHECK(F/B/L/R/T)
  MOPER      VARCHAR2(3) := ''; --MAPPING OPERATOR
  MPORT      VARCHAR2(5) := ''; --MAPPING PORT

  /* ===== PORT CODE(UNREGISTERED) ============== */
  FUNCTION VPORTCODE_INSERT(VPORT VARCHAR2) RETURN VARCHAR2 IS
    XPORT        VARCHAR2(5) := '';
    XPUREPORT    VARCHAR2(3) := '';
    XPURECOUNTRY VARCHAR2(2) := '';
    XDESC        VARCHAR2(30) := 'UNREGISTERED';
    XDATA        VARCHAR2(1) := '';
    XCOUNTRY     VARCHAR2(2) := '';
  
  BEGIN
    XDATA        := '';
    XPUREPORT    := RTRIM(SUBSTR(VPORT, 3, 3)); -- PURE PORT(PUS)
    XPURECOUNTRY := RTRIM(SUBSTR(VPORT, 1, 2)); -- PURE COUNTRY(KR)
    IF XPURECOUNTRY IS NULL THEN
      XPURECOUNTRY := 'ZZ';
    END IF;
    IF XPURECOUNTRY = 'XX' OR XPURECOUNTRY = 'ZZ' THEN
      IF XPURECOUNTRY = 'XX' THEN
        XPURECOUNTRY := 'ZZ';
      END IF;
      XPORT := XPURECOUNTRY || XPUREPORT;
      IF XPUREPORT IS NOT NULL THEN
        --INSERT INTO CDG_PORT VALUES (xPORT,xPUREPORT,xDESC,xPURECOUNTRY,'','','');
        INSERT INTO CDG_PORT
          (CDG_PORT_CODE,
           CDG_PORT_PURECODE,
           CDG_PORT_NAME,
           CDG_PORT_COUNTRY,
           CDG_PORT_BCOLOR,
           CDG_PORT_FCOLOR,
           CDG_PORT_ACTIVE,
           CDG_PORT_GPAREACODE,
           CDG_PORT_GPAREANAME,
           CRE_USR_ID,
           CRE_DT,
           UPD_USR_ID,
           UPD_DT)
        VALUES
          (XPORT,
           XPUREPORT,
           XDESC,
           XPURECOUNTRY,
           '',
           '',
           '',
           '',
           '',
           'EDI',
           SYSDATE,
           'EDI',
           SYSDATE);
        XDATA := 'Y';
      END IF;
    
    ELSIF XPURECOUNTRY <> 'XX' AND XPURECOUNTRY <> 'ZZ' THEN
    
      -- COUNTRY CODE CHECK
      SELECT CDG_CNTR_CODE
        INTO XCOUNTRY
        FROM CDG_COUNTRY
       WHERE CDG_CNTR_CODE = XPURECOUNTRY;
    
      IF XCOUNTRY IS NULL THEN
        INSERT INTO CDG_COUNTRY
          (CDG_CNTR_CODE,
           CDG_CNTR_NAME,
           CDG_CNTR_CONTINENT,
           CDG_CNTR_LOCAL,
           CRE_USR_ID,
           CRE_DT,
           UPD_USR_ID,
           UPD_DT)
        VALUES
          (XPURECOUNTRY, XDESC, '', '', 'EDI', SYSDATE, 'EDI', SYSDATE);
      END IF;
    
      XPORT := XPURECOUNTRY || XPUREPORT;
      IF XPUREPORT IS NOT NULL THEN
        INSERT INTO CDG_PORT
          (CDG_PORT_CODE,
           CDG_PORT_PURECODE,
           CDG_PORT_NAME,
           CDG_PORT_COUNTRY,
           CDG_PORT_BCOLOR,
           CDG_PORT_FCOLOR,
           CDG_PORT_ACTIVE,
           CDG_PORT_GPAREACODE,
           CDG_PORT_GPAREANAME,
           CRE_USR_ID,
           CRE_DT,
           UPD_USR_ID,
           UPD_DT)
        VALUES
          (XPORT,
           XPUREPORT,
           XDESC,
           XPURECOUNTRY,
           '',
           '',
           '',
           '',
           '',
           'EDI',
           SYSDATE,
           'EDI',
           SYSDATE);
        XDATA := 'Y';
      END IF;
    END IF;
  
    RETURN(XDATA);
  
  EXCEPTION
    WHEN OTHERS THEN
      XDATA := '';
      RETURN(XDATA);
  END;

  /* ===== OPERATOR CODE( NOT FOR VVD OPERATOR) ============== */
  FUNCTION VOPER_CHECK(VOPER VARCHAR2) RETURN VARCHAR2 IS
    XCHECK VARCHAR2(3) := '';
  BEGIN
    SELECT CDG_OPER_CODE
      INTO XCHECK -- OPERATOR CODE
      FROM CDG_OPERATOR
     WHERE CDG_OPER_CODE = VOPER;
  
    RETURN(XCHECK);
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN(XCHECK);
    WHEN OTHERS THEN
      RETURN(XCHECK);
  END;

  /* === EDI String Convert Function (for Characterset : UTF8)  */
  FUNCTION CLTSUBSTR(VTEXT IN VARCHAR2, VSTART NUMBER, VLEN NUMBER)
    RETURN VARCHAR2 IS
    XVALUE VARCHAR2(200) := '';
  BEGIN
    IF VTEXT IS NULL THEN
      RETURN XVALUE;
    END IF;
    IF LENGTH(SUBSTR(VTEXT, VSTART, VLEN)) <>
       LENGTHB(SUBSTR(VTEXT, VSTART, VLEN)) THEN
      XVALUE := CONVERT(SUBSTRB(' ' || VTEXT, VSTART, VLEN),
                        'UTF8',
                        'KO16KSC5601');
    ELSE
      XVALUE := SUBSTRB(VTEXT, VSTART, VLEN);
    END IF;
    RETURN TRIM(XVALUE);
  
  EXCEPTION
    WHEN OTHERS THEN
      XVALUE := '';
      RETURN(XVALUE);
  END CLTSUBSTR;

BEGIN

  IF DEBUG = '1' THEN
    DBMS_OUTPUT.ENABLE(1000000);
  END IF;

PKG_EDI.LOG(DEBUG,'START');

  SELECT TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS')
    INTO XACCDATE, XACCTIME
    FROM DUAL;

  IF UTL_FILE.IS_OPEN(SFILE_HANDLE) THEN
    UTL_FILE.FCLOSE(SFILE_HANDLE);
  END IF;

  -- SHIP: FF_SHIP/out/
  V_FILEDIRECTORY := PKG_EDI_CHECK.FINDEDI_GETFOLDER('R', 'SHIP');
  --v_FileDirectory := '/tesroot/edidata/in/ediconv/HJSPUSBT/20120207/';
  SFILE_HANDLE := UTL_FILE.FOPEN(V_FILEDIRECTORY, P_FILENAME, 'R');

  GLOCALPORT := PKG_EDI_CHECK.FINDLOCALPORT('TML_CY'); -- BICT TERMIAL(LOCAL PORT)

  LOOP
    BEGIN
      UTL_FILE.GET_LINE(SFILE_HANDLE, V_NEWLINE);
      V_RECNAME := SUBSTR(V_NEWLINE, 1, 5); --REC NO
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        EXIT;
    END;
  
    IF V_RECNAME != 'REC01' AND V_RECNAME != 'REC02' THEN
      -- DOCID
      HREC.H01 := RTRIM(SUBSTR(V_NEWLINE, 1, 6)); -- EDI MESSAGE NAME(BAPLIE)
      HREC.H01 := 'BAPLIE'; -- EDI MESSAGE NAME(BAPLIE)
      HREC.H02 := RTRIM(SUBSTR(V_NEWLINE, 7, 14)); -- MESSAGE NO
      HREC.H03 := RTRIM(SUBSTR(V_NEWLINE, 21, 14)); -- SENDER ID
      HREC.H04 := RTRIM(SUBSTR(V_NEWLINE, 35, 14)); -- RECEIVER ID
      HREC.H05 := RTRIM(SUBSTR(V_NEWLINE, 49, 8)); -- MESSAGE VERSION
    
    ELSIF V_RECNAME = 'REC01' THEN
      GERRHEAD := TRUE;
    
      HREC.R01 := RTRIM(CLTSUBSTR(V_NEWLINE, 6, 3)); -- DOCUMENT CODE
      HREC.R02 := RTRIM(CLTSUBSTR(V_NEWLINE, 9, 12)); -- DOCUMENT NUMBER
      HREC.R03 := RTRIM(CLTSUBSTR(V_NEWLINE, 21, 2)); -- MSG FUNCTION CODE(2,3,4,5,9,22)
      HREC.R04 := RTRIM(CLTSUBSTR(V_NEWLINE, 23, 10)); -- MSG LOG DATE
      HREC.R05 := LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 33, 17))); -- SHIPPING VOYAGE NO
      HREC.R06 := LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 50, 9))); -- CALL SIGN
      HREC.R07 := RTRIM(CLTSUBSTR(V_NEWLINE, 59, 9)); -- LIOYD CODE
      HREC.R08 := LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 68, 35))); -- VESSEL NAME
      HREC.R09 := RTRIM(CLTSUBSTR(V_NEWLINE, 103, 5)); -- PLACE OF DEPARTURE
      HREC.R10 := RTRIM(CLTSUBSTR(V_NEWLINE, 108, 5)); -- NEXT PORT OF CALL
    
      IF HREC.H05 = 'SMDG20' THEN
        -- MESSAGE VERSION
        HREC.R11 := RTRIM(CLTSUBSTR(V_NEWLINE, 113, 10)); -- ACTUAL ARRIVE DATE/TIME
        HREC.R12 := RTRIM(CLTSUBSTR(V_NEWLINE, 123, 10)); -- ESTIMATE ARRIVE DATE/TIME
        HREC.R13 := RTRIM(CLTSUBSTR(V_NEWLINE, 133, 10)); -- ESTIMATE DEPARTURE DATE/TIME
        HREC.R14 := RTRIM(CLTSUBSTR(V_NEWLINE, 143, 10)); -- ACTUAL DEPARTURE DATE NAME
        HREC.R15 := RTRIM(CLTSUBSTR(V_NEWLINE, 153, 10)); -- LOADING VOYAGE NO
      ELSIF HREC.H05 != 'SMDG20' THEN
        HREC.R11 := '';
        HREC.R12 := RTRIM(CLTSUBSTR(V_NEWLINE, 113, 10)); -- ARRIVE DATE/TIME
        HREC.R13 := RTRIM(CLTSUBSTR(V_NEWLINE, 123, 10)); -- DEPARTURE DATE/TIME
        HREC.R14 := '';
        HREC.R15 := RTRIM(CLTSUBSTR(V_NEWLINE, 133, 10)); -- LOADING VOYAGE NO
      END IF;
    
      -- (1) VESSEL CHECK
      GVESSEL := PKG_VVD_CHECK.FINDVV(HREC.R06, HREC.R08, HREC.R05);
      IF SUBSTR(GVESSEL, 1, 5) = 'WRONG' THEN
        ERR_HREC.EHN01 := HREC.R05;
        ERR_HREC.EHD01 := '510'; -- Wrong Vessel Voyage
        GERRHEAD       := FALSE;
      ELSIF SUBSTR(GVESSEL, 15, 1) = 'D' THEN
        ERR_HREC.EHN01 := SUBSTR(GVESSEL, 1, 13);
        ERR_HREC.EHD01 := '530'; -- Departured Vessel
        GERRHEAD       := FALSE;
      
      ELSIF SUBSTR(GVESSEL, 1, 3) = 'DUP' THEN
        ERR_HREC.EHN01 := HREC.R05;
        ERR_HREC.EHD01 := '509'; -- Voyage is duplicated
        GERRHEAD       := FALSE;
      END IF;
    
      -- (2) SENDER CHECK
      IF HREC.H03 IS NULL THEN
        ERR_HREC.EHN02 := '';
        ERR_HREC.EHD02 := '200'; --Sender ID is null
        GERRHEAD       := FALSE;
      END IF;
    
      IF GERRHEAD = TRUE THEN
        GVSLVOY  := SUBSTR(GVESSEL, 1, 13); --VESSEL/VOY
        GVSLCODE := SUBSTR(GVESSEL, 1, 4); --VESSEL CODE
        GVOYAGE  := SUBSTR(GVESSEL, 6, 8); --VOYAGE CODE
      END IF;
    
      IF GERRHEAD = TRUE THEN
        --(3) DISCHARGE BAPLIE CONFIRM CHECK(SHIP_PLAN)
        GCONFIRM := PKG_EDI_VESSEL.BAPLIE_CONFIRM(GVSLVOY);
        IF GCONFIRM = 'Y' THEN
          ERR_HREC.EHN03 := GCONFIRM;
          ERR_HREC.EHD03 := '910'; -- BAPLIE is Confirmed(Document > EDI Closing).    ## ETV_BAPLIE.ETV_BAP_PLANCONFIRM ##
          GERRHEAD       := FALSE;
        END IF;
      END IF;
    
      IF GERRHEAD = TRUE THEN
        --(4) VESSEL DEFINE CHECK CHECK (PROFILE)
        GVESSELDEF := PKG_EDI_VESSEL.VESSEL_DEF_CHECK(GVSLCODE);
        IF GVESSELDEF = 0 THEN
          ERR_HREC.EHN04 := 'Define';
          ERR_HREC.EHD04 := '930'; --Vessel Profile does not exist. Upload Vessel profile.     ##VSP_STOWAGE##
          GERRHEAD       := FALSE;
        END IF;
      END IF;
    
      --(5) DISCHARGE SHIPPLAN START CHECK(SHIP_PLAN)
      IF GERRHEAD = TRUE THEN
        GPLANCHECK := PKG_EDI_VESSEL.SHIPPLAN_CHECK(GVSLVOY);
        IF GPLANCHECK > 0 THEN
          IF HREC.R03 != '2' THEN
            ERR_HREC.EHN04 := 'Planned';
            ERR_HREC.EHD04 := '911'; -- Discharging Container is Planned       ##VSP_SHP_PLANST IN ('P', 'A', 'C')##
            GERRHEAD       := FALSE;
          END IF;
        END IF;
      END IF;

PKG_EDI.LOG(DEBUG,'528');

      IF GERRHEAD = FALSE THEN
        -- ERROR OCCURED
        -- HEADER DATA
        ERRLOG.VDATA := HREC.H01 || HREC.H02 || HREC.H03 || HREC.H04 ||
                        HREC.H05;
        -- REC01 DATA
        ERRLOG.VDATA := ERRLOG.VDATA || HREC.R01 || HREC.R02 || HREC.R03 ||
                        HREC.R04 || HREC.R05;
        ERRLOG.VDATA := ERRLOG.VDATA || HREC.R06 || HREC.R07 || HREC.R08 ||
                        HREC.R09 || HREC.R10;
        ERRLOG.VDATA := ERRLOG.VDATA || HREC.R11 || HREC.R12 || HREC.R13 ||
                        HREC.R14 || HREC.R15;
      
        ERRLOG.VERRINFO := ERR_HREC.EHN01 || '+' || ERR_HREC.EHN02 || '+' ||
                           ERR_HREC.EHN03 || '+' || ERR_HREC.EHN04;
        ERRLOG.VERRDESC := ERR_HREC.EHD01 || '+' || ERR_HREC.EHD02 || '+' ||
                           ERR_HREC.EHD03 || '+' || ERR_HREC.EHD04;
      ELSIF GERRHEAD = TRUE THEN
        ERRLOG.VDATA    := '';
        ERRLOG.VERRINFO := '';
        ERRLOG.VERRDESC := '';
      END IF;
    
      VERRFILE := P_FILENAME;
      VMESSAGE := HREC.H01;
PKG_EDI.LOG(DEBUG,'555');
    
      -- SELECT ERROR LOG TABLE(DELETE)
      PERRORSQL := PKG_EDI_VESSEL.ERROR_LOG(VERRFILE, VMESSAGE);
      IF PERRORSQL IS NOT NULL THEN
        --DELETE ERROR FILE
        DELETE FROM ETC_ERRLOG
         WHERE ETC_ER_LOGFILE = VERRFILE
           AND ETC_ER_EDOCID = VMESSAGE;
      END IF;
    
      -- ERROR LOG INSERT
      IF GERRHEAD = FALSE THEN
        INSERT INTO ETC_ERRLOG
          (ETC_ER_LOGFILE,
           ETC_ER_EDOCID,
           ETC_ER_CSNAME,
           ETC_ER_DATA,
           ETC_ER_INFO,
           ETC_ER_DESC,
           ETC_ER_MESSAGE,
           ETC_ER_ACCEDATE,
           ETC_ER_ACCETIME)
        VALUES
          (VERRFILE,
           VMESSAGE,
           'HEADER-REC01',
           ERRLOG.VDATA,
           ERRLOG.VERRINFO,
           ERRLOG.VERRDESC,
           HREC.R03,
           XACCDATE,
           XACCTIME);
      END IF;
PKG_EDI.LOG(DEBUG,'589');
      IF GERRHEAD = TRUE THEN
      
        -- SELECT BAPLIE/SHIPPLAN PARENT TABLE
        PBAPLIESQL   := PKG_EDI_VESSEL.BAPLIE_PARENT(GVSLVOY);
        PSHIPPLANSQL := PKG_EDI_VESSEL.SHIPPLAN_DISCH(GVSLVOY);
      
        -- MESSAGE VERSION
        IF HREC.R03 != '2' AND HREC.R03 != '3' AND HREC.R03 != '4' THEN
        
          IF PBAPLIESQL IS NOT NULL THEN
            -- DELETE BAPLIE PARENT(VESSEL,VOYAGE)
            DELETE FROM ETV_BAPLIE
             WHERE ETV_BAP_VESSEL = GVSLCODE
               AND ETV_BAP_VOYAGE = GVOYAGE;
          END IF;
        
          -- BAPLIE PARENT INSERT
          INSERT INTO ETV_BAPLIE
            (ETV_BAP_DOCNAME,
             ETV_BAP_DOCNO,
             ETV_BAP_DOCSEND,
             ETV_BAP_DOCRECV,
             ETV_BAP_VERSION,
             ETV_BAP_DOCCODE,
             ETV_BAP_DOCNUMB,
             ETV_BAP_MSGCODE,
             ETV_BAP_MSGLOGDATE,
             ETV_BAP_VESSSAIL,
             ETV_BAP_CALLSIGN,
             ETV_BAP_LOYDCODE,
             ETV_BAP_VESSNAME,
             ETV_BAP_DEPTPORT,
             ETV_BAP_CALLPORT,
             ETV_BAP_ACTARRV,
             ETV_BAP_ESTARRV,
             ETV_BAP_ESTDEPT,
             ETV_BAP_ACTDEPT,
             ETV_BAP_LOADVOY,
             ETV_BAP_VESSEL,
             ETV_BAP_VOYAGE,
             ETV_BAP_PLANCONFIRM,
             CRE_USR_ID,
             CRE_DT,
             UPD_USR_ID,
             UPD_DT)
          VALUES
            (HREC.H01,
             HREC.H02,
             HREC.H03,
             HREC.H04,
             HREC.H05,
             HREC.R01,
             HREC.R02,
             HREC.R03,
             HREC.R04,
             HREC.R05,
             HREC.R06,
             HREC.R07,
             HREC.R08,
             HREC.R09,
             HREC.R10,
             HREC.R11,
             HREC.R12,
             HREC.R13,
             HREC.R14,
             HREC.R15,
             GVSLCODE,
             GVOYAGE,
             '',
             'EDI',
             SYSDATE,
             'EDI',
             SYSDATE);
        
          -- SHIPPLAN(DISCHARGE)
          IF PSHIPPLANSQL IS NOT NULL THEN
          
            -- DELETE SHIPPLAN(DISCHARGE)
            DELETE FROM VSP_SHIP
             WHERE VSP_SHP_VESSEL = GVSLCODE
               AND VSP_SHP_VOYAGE = GVOYAGE
               AND VSP_SHP_DISLOAD = 'D';
          
            -- DELETE SHIPPLAN(SHIFTING)
            DELETE FROM VSP_SHIP
             WHERE VSP_SHP_VESSEL = GVSLCODE
               AND VSP_SHP_VOYAGE = GVOYAGE
               AND VSP_SHP_DISLOAD = 'L'
               AND VSP_SHP_CLASS IN ('S1', 'S2');
          
          END IF;
        
        ELSIF HREC.R03 = '2' THEN
          IF PBAPLIESQL IS NULL THEN
            -- BAPLIE ADD(2-MSGCODE)
            INSERT INTO ETV_BAPLIE
              (ETV_BAP_DOCNAME,
               ETV_BAP_DOCNO,
               ETV_BAP_DOCSEND,
               ETV_BAP_DOCRECV,
               ETV_BAP_VERSION,
               ETV_BAP_DOCCODE,
               ETV_BAP_DOCNUMB,
               ETV_BAP_MSGCODE,
               ETV_BAP_MSGLOGDATE,
               ETV_BAP_VESSSAIL,
               ETV_BAP_CALLSIGN,
               ETV_BAP_LOYDCODE,
               ETV_BAP_VESSNAME,
               ETV_BAP_DEPTPORT,
               ETV_BAP_CALLPORT,
               ETV_BAP_ACTARRV,
               ETV_BAP_ESTARRV,
               ETV_BAP_ESTDEPT,
               ETV_BAP_ACTDEPT,
               ETV_BAP_LOADVOY,
               ETV_BAP_VESSEL,
               ETV_BAP_VOYAGE,
               ETV_BAP_PLANCONFIRM,
               CRE_USR_ID,
               CRE_DT,
               UPD_USR_ID,
               UPD_DT)
            VALUES
              (HREC.H01,
               HREC.H02,
               HREC.H03,
               HREC.H04,
               HREC.H05,
               HREC.R01,
               HREC.R02,
               HREC.R03,
               HREC.R04,
               HREC.R05,
               HREC.R06,
               HREC.R07,
               HREC.R08,
               HREC.R09,
               HREC.R10,
               HREC.R11,
               HREC.R12,
               HREC.R13,
               HREC.R14,
               HREC.R15,
               GVSLCODE,
               GVOYAGE,
               '',
               'EDI',
               SYSDATE,
               'EDI',
               SYSDATE);
          END IF;
        
        ELSIF HREC.R03 = '3' THEN
          -- MESSAGE DELETE
          IF PBAPLIESQL IS NOT NULL THEN
            -- DELETE BAPLIE PARENT(3-DELETE)
            DELETE FROM ETV_BAPLIE
             WHERE ETV_BAP_VESSEL = GVSLCODE
               AND ETV_BAP_VOYAGE = GVOYAGE;
            GERRHEAD := FALSE; -- MESSAGE CANCEL
          END IF;
        
          -- SHIPPLAN(DISCHARGE)
          IF PSHIPPLANSQL IS NOT NULL THEN
            -- DELETE SHIPPLAN(DISCHARGE)
            DELETE FROM VSP_SHIP
             WHERE VSP_SHP_VESSEL = GVSLCODE
               AND VSP_SHP_VOYAGE = GVOYAGE
               AND VSP_SHP_DISLOAD = 'D';
          
            -- DELETE SHIPPLAN(SHIFTING)
            DELETE FROM VSP_SHIP
             WHERE VSP_SHP_VESSEL = GVSLCODE
               AND VSP_SHP_VOYAGE = GVOYAGE
               AND VSP_SHP_DISLOAD = 'L'
               AND VSP_SHP_CLASS IN ('S1', 'S2');
            GERRHEAD := FALSE; -- MESSAGE CANCEL
          
          END IF;
        
        END IF; -- END OF MESSAGE
      
      END IF;
    
    ELSIF V_RECNAME = 'REC02' THEN
    
      EXIT WHEN GERRHEAD = FALSE; -- ERROR OCCURED(HEADER/REC01)
      GERRPART := TRUE;
    
      ERR_CREC.ECN01 := '';
      ERR_CREC.ECN02 := '';
      ERR_CREC.ECN03 := '';
      ERR_CREC.ECN04 := '';
      ERR_CREC.ECN05 := '';
      ERR_CREC.ECN06 := '';
      ERR_CREC.ECN07 := '';
      ERR_CREC.ECN08 := '';
      ERR_CREC.ECN09 := '';
      ERR_CREC.ECD01 := '';
      ERR_CREC.ECD02 := '';
      ERR_CREC.ECD03 := '';
      ERR_CREC.ECD04 := '';
      ERR_CREC.ECD05 := '';
      ERR_CREC.ECD06 := '';
      ERR_CREC.ECD07 := '';
      ERR_CREC.ECD08 := '';
      ERR_CREC.ECD09 := '';
    
      CREC.F03 := RTRIM(CLTSUBSTR(V_NEWLINE, 6, 7)); -- STOWAGE POSITION
      CREC.F04 := RTRIM(CLTSUBSTR(V_NEWLINE, 13, 3)); -- GROSS WEIGHT(KGB,LBR)
      CREC.F05 := RTRIM(CLTSUBSTR(V_NEWLINE, 16, 10)); -- GROSS WEIGHT VALUE

      IF CREC.F04 = 'LBR' THEN
        CREC.F04 := 'KGM';
        CREC.F05 := TO_CHAR(FLOOR(TO_NUMBER(CREC.F05) * 0.45359)); -- LBR>KGM
      ELSE
        IF CREC.F05 IS NOT NULL THEN
          -- DBMS_OUTPUT.put_line('CREC.F05==>' || CREC.F05);
          CREC.F05 := TO_CHAR(TO_NUMBER(CREC.F05));
        END IF;
      END IF;

      CREC.F06 := RTRIM(CLTSUBSTR(V_NEWLINE, 26, 3)); -- OVERLENGTH FRONT QUAL
      CREC.F07 := RTRIM(CLTSUBSTR(V_NEWLINE, 29, 10)); -- OVERLENGTH FRONT VALUE
      IF CREC.F07 IS NOT NULL THEN
        CREC.F07 := TO_CHAR(TO_NUMBER(CREC.F07));
      END IF;
      CREC.F08 := RTRIM(CLTSUBSTR(V_NEWLINE, 39, 3)); -- OVERLENGTH BACK QUAL
      CREC.F09 := RTRIM(CLTSUBSTR(V_NEWLINE, 42, 10)); -- OVERLENGTH BACK VALUE
      IF CREC.F09 IS NOT NULL THEN
        CREC.F09 := TO_CHAR(TO_NUMBER(CREC.F09));
      END IF;
      CREC.F10 := RTRIM(CLTSUBSTR(V_NEWLINE, 52, 3)); -- OVERWIDTH LEFT QUAL
      CREC.F11 := RTRIM(CLTSUBSTR(V_NEWLINE, 55, 10)); -- OVERWIDTH LEFT VALUE
      IF CREC.F11 IS NOT NULL THEN
        CREC.F11 := TO_CHAR(TO_NUMBER(CREC.F11));
      END IF;
      CREC.F12 := RTRIM(CLTSUBSTR(V_NEWLINE, 65, 3)); -- OVERWIDTH RIGHT QUAL
      CREC.F13 := RTRIM(CLTSUBSTR(V_NEWLINE, 68, 10)); -- OVERWIDTH RIGHT VALUE
      IF CREC.F13 IS NOT NULL THEN
        CREC.F13 := TO_CHAR(TO_NUMBER(CREC.F13));
      END IF;
      CREC.F14 := RTRIM(CLTSUBSTR(V_NEWLINE, 78, 3)); -- OVERHEIGHT QUAL
      CREC.F15 := RTRIM(CLTSUBSTR(V_NEWLINE, 81, 10)); -- OVERHEIGHT VAL
      IF CREC.F15 IS NOT NULL THEN
        CREC.F15 := TO_CHAR(TO_NUMBER(CREC.F15));
      END IF;
      CREC.F16 := RTRIM(CLTSUBSTR(V_NEWLINE, 91, 3)); -- TEMPERATURE QUAL
      BEGIN
          CREC.F17 := RTRIM(REPLACE(CLTSUBSTR(V_NEWLINE, 94, 10), ',' , '.' )); -- TEMPERATURE VAL
          IF CREC.F16 = 'FAH' THEN
            CREC.F16 := 'CEL';
            IF CREC.F17 IS NOT NULL THEN
              CREC.F17 := TO_CHAR(TRUNC((5 * (TO_NUMBER(CREC.F17) - 32) / 9), 1)); -- FAH>CEL
            END IF;
          ELSE
            IF CREC.F17 IS NOT NULL THEN
              CREC.F17 := TO_CHAR(TO_NUMBER(CREC.F17));
            END IF;
          END IF;
      EXCEPTION
        WHEN OTHERS THEN
            GERRPART       := FALSE;
      END;    
    
      CREC.F18 := RTRIM(CLTSUBSTR(V_NEWLINE, 104, 10)); -- TEMPERATURE MIN
      IF CREC.F18 IS NOT NULL THEN
        CREC.F18 := TO_CHAR(TO_NUMBER(CREC.F18));
      END IF;
      CREC.F19 := RTRIM(CLTSUBSTR(V_NEWLINE, 114, 10)); -- TEMPERATURE MAX
      IF CREC.F19 IS NOT NULL THEN
        CREC.F19 := TO_CHAR(TO_NUMBER(CREC.F19));
      END IF;
      CREC.F20 := RTRIM(CLTSUBSTR(V_NEWLINE, 124, 5)); -- PORT OF LOADING(POL)
      CREC.F21 := RTRIM(CLTSUBSTR(V_NEWLINE, 129, 5)); -- PORT OF DISCHARGE(POD)
      CREC.F22 := RTRIM(CLTSUBSTR(V_NEWLINE, 134, 5)); -- PORT OF DESTINATION(FPOD)
      CREC.F23 := RTRIM(CLTSUBSTR(V_NEWLINE, 139, 3)); -- REFERENCE VALUE(BM)-1
      CREC.F24 := RTRIM(CLTSUBSTR(V_NEWLINE, 142, 7)); -- REFERENCE VALUE(ET)--->LEADING STOWAGE
      CREC.F25 := RTRIM(CLTSUBSTR(V_NEWLINE, 149, 3)); -- CONTAINER QUAL(CN,BB,TE)
      CREC.F26 := RTRIM(CLTSUBSTR(V_NEWLINE, 152, 4)); -- CONTAINER NO
      CREC.F26 := CREC.F26 || LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 156, 13)));
      CREC.F26 := UPPER(CREC.F26);
    
      CREC.F27 := RTRIM(CLTSUBSTR(V_NEWLINE, 169, 4)); -- ISO
      CREC.F28 := RTRIM(CLTSUBSTR(V_NEWLINE, 173, 1)); -- EMPTY/FULL
      CREC.F29 := RTRIM(CLTSUBSTR(V_NEWLINE, 174, 2)); -- STATUS
    
      CREC.F30         := RTRIM(CLTSUBSTR(V_NEWLINE, 176, 3)); -- CONT ATTACH-1 QUAL
      CREC.F31         := RTRIM(CLTSUBSTR(V_NEWLINE, 179, 4)); -- CONT ATTACH-1 VAL
      CREC.F31         := CREC.F31 ||
                          LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 183, 13)));
      CREC.F31         := UPPER(CREC.F31);
      V_NEST_CONT_LIST := '';
      IF (CREC.F31 IS NOT NULL OR CREC.F31 != '') THEN
        V_NEST_CONT_LIST := CREC.F31 || ',';
      END IF;
    
      CREC.F32 := RTRIM(CLTSUBSTR(V_NEWLINE, 196, 3)); -- CONT ATTACH-2 QUAL
      CREC.F33 := RTRIM(CLTSUBSTR(V_NEWLINE, 199, 4)); -- CONT ATTACH-2 VAL
      CREC.F33 := CREC.F33 || LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 203, 13)));
      CREC.F33 := UPPER(CREC.F33);
      IF (CREC.F33 IS NOT NULL OR CREC.F33 != '') THEN
        V_NEST_CONT_LIST := V_NEST_CONT_LIST || CREC.F33 || ',';
      END IF;
    
      CREC.F34 := RTRIM(CLTSUBSTR(V_NEWLINE, 216, 3)); -- CONT ATTACH-3 QUAL
      CREC.F35 := RTRIM(CLTSUBSTR(V_NEWLINE, 219, 4)); -- CONT ATTACH-3 VAL
      CREC.F35 := CREC.F35 || LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 223, 13)));
      CREC.F35 := UPPER(CREC.F35);
      IF (CREC.F35 IS NOT NULL OR CREC.F35 != '') THEN
        V_NEST_CONT_LIST := V_NEST_CONT_LIST || CREC.F35 || ',';
      END IF;
    
      CREC.F36 := RTRIM(CLTSUBSTR(V_NEWLINE, 236, 3)); -- CONT ATTACH-4 QUAL
      CREC.F37 := RTRIM(CLTSUBSTR(V_NEWLINE, 239, 4)); -- CONT ATTACH-4 VAL
      CREC.F37 := CREC.F37 || LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 243, 13)));
      CREC.F37 := UPPER(CREC.F37);
      IF (CREC.F37 IS NOT NULL OR CREC.F37 != '') THEN
        V_NEST_CONT_LIST := V_NEST_CONT_LIST || CREC.F37 || ',';
      END IF;
    
      CREC.F38 := RTRIM(CLTSUBSTR(V_NEWLINE, 256, 3)); -- CONT ATTACH-5 QUAL
      CREC.F39 := RTRIM(CLTSUBSTR(V_NEWLINE, 259, 4)); -- CONT ATTACH-5 VAL
      CREC.F39 := CREC.F39 || LTRIM(RTRIM(CLTSUBSTR(V_NEWLINE, 263, 13)));
      CREC.F39 := UPPER(CREC.F39);
      IF (CREC.F39 IS NOT NULL OR CREC.F39 != '') THEN
        V_NEST_CONT_LIST := V_NEST_CONT_LIST || CREC.F39 || ',';
      END IF;
    
      CREC.F40 := RTRIM(CLTSUBSTR(V_NEWLINE, 276, 7)); -- IMDG CODE
      CREC.F41 := RTRIM(CLTSUBSTR(V_NEWLINE, 283, 7)); -- IMDG PAGE
      CREC.F42 := RTRIM(CLTSUBSTR(V_NEWLINE, 290, 4)); -- UNDG CODE
      CREC.F43 := RTRIM(CLTSUBSTR(V_NEWLINE, 294, 3)); -- FLASH POINT QUAL
      CREC.F44 := RTRIM(CLTSUBSTR(V_NEWLINE, 297, 10)); -- FLASH POINT VAL
      CREC.F45 := RTRIM(CLTSUBSTR(V_NEWLINE, 307, 3)); -- PACKING GROUP
      CREC.F46 := RTRIM(CLTSUBSTR(V_NEWLINE, 310, 6)); -- EMS NUMBER
      CREC.F47 := RTRIM(CLTSUBSTR(V_NEWLINE, 316, 4)); -- MFAG
      CREC.F48 := RTRIM(CLTSUBSTR(V_NEWLINE, 320, 3)); -- CONT OPERATOR
      CREC.F62 := RTRIM(CLTSUBSTR(V_NEWLINE, 343, 5)); -- PORT OF ORIGIN(POR)
      CREC.F63 := RTRIM(CLTSUBSTR(V_NEWLINE, 348, 5)); -- NEXT PORT(NPOD)
      
      /* 2016.05.17 VGM ADD - 9015707 */
      CREC.F71 := RTRIM(CLTSUBSTR(V_NEWLINE, 353, 18)); -- VGM Weight
      CREC.F72 := RTRIM(CLTSUBSTR(V_NEWLINE, 371, 3)); -- VGM Reference
      CREC.F73 := RTRIM(CLTSUBSTR(V_NEWLINE, 374, 70)); -- VGM Certification No
      CREC.F74 := RTRIM(CLTSUBSTR(V_NEWLINE, 444, 35)); -- VGM Date/Time
      CREC.F75 := RTRIM(CLTSUBSTR(V_NEWLINE, 479, 70)); -- VGM Sign 1
      CREC.F76 := RTRIM(CLTSUBSTR(V_NEWLINE, 549, 70)); -- VGM Sign 2
      CREC.F77 := RTRIM(CLTSUBSTR(V_NEWLINE, 619, 70)); -- VGM Sign 3
      CREC.F78 := RTRIM(CLTSUBSTR(V_NEWLINE, 689, 70)); -- VGM Sign 4
      
	/*
     * 2016.06.30
     */
		IF TRIM(CREC.F71) IS NOT NULL THEN
        	CREC.F05 := TRIM(CREC.F71);
            
            IF CREC.F04 = 'LBR' THEN
                CREC.F04 := 'KGM';
                CREC.F05 := TO_CHAR(FLOOR(TO_NUMBER(CREC.F05) * 0.45359)); -- LBR>KGM
			ELSE
                IF CREC.F05 IS NOT NULL THEN
                	CREC.F05 := TO_CHAR(TO_NUMBER(CREC.F05));
                END IF;
            END IF;
        END IF;
        
      -- DBMS_OUTPUT.PUT_LINE('AA30:' || CREC.F26);
    
      -- (1) STOWAGE CHECK
      CREC.F03 := RTRIM(SUBSTR(CREC.F03, 2, 6));
      IF CREC.F03 IS NOT NULL THEN
        --FUNCTION (STOWAGE)
        IF CREC.F03 = '000000' THEN
          ERR_CREC.ECN01 := CREC.F03;
          ERR_CREC.ECD01 := '070';  --Stowage Position does not exist. Check and upload vessel profile.   ##VSP_STOWAGE##
          GERRPART       := FALSE;
        
          /* ==== STOWAGE CONVERT(JOBBAY-20)
          gREALSTOW:=gREALSTOW+1;
          CREC.F03 :=TO_CHAR(gREALSTOW);
          IF SUBSTR(CREC.F03,5,2)='20' THEN
              gREALSTOW:=gREALSTOW+10000-20;
          END IF;
          ==============================*/
        
        ELSIF CREC.F03 != '000000' THEN
          GSTOWAGE := PKG_EDI_CHECK.CHSTOW(GVSLCODE, CREC.F03);
          GREALBAY := SUBSTR(CREC.F03, 1, 2);
          IF GSTOWAGE IS NULL THEN
            ERR_CREC.ECN01 := CREC.F03;
            ERR_CREC.ECD01 := '070'; --Stowage Position does not exist. Check and upload vessel profile.   ##VSP_STOWAGE##
            GERRPART       := FALSE;
          END IF;
        
          -- SHIP PLAN(DISCHARGE: VSP_SHIP)
          IF GERRPART = TRUE THEN
            GEXTJOB  := PKG_EDI_CHECK.GET_EXTJOB(GVSLCODE, CREC.F03);
            GEXTJOB  := RTRIM(GEXTJOB);
            GINTSTOW := PKG_EDI_CHECK.INT_POSITION(GVSLCODE, CREC.F03);
            GINTSTOW := RTRIM(GINTSTOW);
            IF TO_NUMBER(SUBSTR(CREC.F03, 5, 2)) > 40 THEN
              GDH := 'D';
            ELSE
              GDH := 'H';
            END IF;
          
            IF GEXTJOB IS NULL OR GINTSTOW IS NULL THEN
              ERR_CREC.ECN01 := CREC.F03;
              ERR_CREC.ECD01 := '073'; --Stowage does not exist. Check and upload vessel profile.      ##VSP_STOWAGE.VSP_STOW_EXTJOBBAY##
              GERRPART       := FALSE;
            END IF;
          END IF;
        
          -- SHIP PLAN(DISCHARGE: VSP_SHIP) DUPLICATION STOWAGE CHECK
          IF GERRPART = TRUE THEN
            GSTOWAGE := PKG_EDI_VESSEL.SHIPPLAN_DISSTOW(GVSLVOY, CREC.F03);
            IF GSTOWAGE IS NOT NULL THEN
              ERR_CREC.ECN01 := CREC.F03;
              ERR_CREC.ECD01 := '074'; --Stowage is duplicated.  ##VSP_SHIP.VSP_SHP_STOWAGE##
              GERRPART       := FALSE;
            END IF;
          END IF;
        END IF;
      
      ELSIF CREC.F03 IS NULL THEN
        ERR_CREC.ECN01 := CREC.F03;
        ERR_CREC.ECD01 := '070'; --Stowage Position does not exist. Check and upload vessel profile.   ##VSP_STOWAGE##
        GERRPART       := FALSE;
      
      END IF;
    
      /* == STOWAGE(EXTJOB BAY) ONCE MORE CHECK ==== */
      IF GERRPART = TRUE THEN
        IF GEXTJOB IS NULL THEN
          ERR_CREC.ECN01 := CREC.F03;
          ERR_CREC.ECD01 := '073'; --Stowage does not exist. Check and upload vessel profile.      ##VSP_STOWAGE.VSP_STOW_EXTJOBBAY##
          GERRPART       := FALSE;
        END IF;
      END IF;
    
      -- DBMS_OUTPUT.PUT_LINE('AA40:' || CREC.F03 ||'/'||gVSLCODE||'/'||gSTOWAGE);
    
      -- (2) CONTAINER NO CHECK
      IF CREC.F26 IS NOT NULL THEN
        RCNT  := RCNT + 1; --CONTAINER COUNT
        GCONT := '';
        IF CREC.F25 = 'CN' THEN
          GCONT := PKG_EDI_CHECK.CHCONTNO(CREC.F26); --FUNCTION (CONTAINER NO)
          IF GCONT IS NULL THEN
            ERR_CREC.ECN02 := CREC.F26;
            ERR_CREC.ECD02 := '010'; --Incorrect Container Number
            GERRPART       := FALSE;
          END IF;
        END IF;
      
        -- gCONT:=PKG_EDI_CHECK.CHCONTYARD(CREC.F26);      --(CONTAINER YARD CHECK)
        GCONT := '';
        IF GCONT IS NOT NULL THEN
          ERR_CREC.ECN02 := CREC.F26;
          ERR_CREC.ECD02 := '350'; -- Container In a Yard;
          GERRPART       := FALSE;
        END IF;
      
        CBAPLIESQL := PKG_EDI_VESSEL.BAPLIE_CHILD(GVSLVOY, CREC.F26);
        IF CBAPLIESQL IS NOT NULL THEN
          ERR_CREC.ECN02 := CREC.F26;
          ERR_CREC.ECD02 := '075'; -- Container is duplicated in BAPLIE.       ##ETV_BAPLIE_CONT##
          GERRPART       := FALSE;
        END IF;
      
      END IF;
    
      -- (3) ISO CHECK(CONTAINER ISO CHECK)
      /* CDS_CONTAIENR not used (2013.11.29)
      IF CREC.F26 IS NOT NULL THEN
          gISO :='';
          gISO := PKG_EDI_CHECK.CHISO_CONTAINER(CREC.F26);     --FUNCTION (CONTAINER ISO)
          IF gISO IS NOT NULL THEN
              CREC.F27 := gISO;
          END IF;
      END IF;*/
    
      --            IF CREC.F27 IS NOT NULL AND gISO IS NULL THEN
      IF CREC.F27 IS NOT NULL THEN
        GISO := PKG_EDI_CHECK.CHISO(CREC.F27); --FUNCTION (ISO)
        IF GISO IS NULL THEN
          ERR_CREC.ECN03 := CREC.F27;
          ERR_CREC.ECD03 := '008'; --ISO Does Not Exist.(Define > Code > ISO Code)    ##CDC_ISO_CODE##
          GERRPART       := FALSE;
        ELSE
          CREC.F27 := GISO; --ISO CONVERT(23GP-2310)
        END IF;
      ELSIF CREC.F27 IS NULL THEN
        ERR_CREC.ECN03 := '';
        ERR_CREC.ECD03 := '007'; -- ISO is null in BAPLIE.
        GERRPART       := FALSE;
      END IF;
    
      -- DBMS_OUTPUT.PUT_LINE('AA60:' || CREC.F27);
    
      -- (4) FULL/EMPTY TRANSLATE
      IF CREC.F28 = '4' THEN
        CREC.F28 := 'M';
      ELSIF CREC.F28 = '5' THEN
        CREC.F28 := 'F';
      ELSE
        CREC.F28 := 'F';
      END IF;
    
      -- (5) STATUS (CLASS)
      IF CREC.F29 IS NULL OR CREC.F29 = '0' THEN
        --DISCHARGE PORT(PTKKR)
        IF SUBSTR(CREC.F21, 3, 3) = SUBSTR(GLOCALPORT, 3, 3) THEN
          IF CREC.F22 IS NULL OR CREC.F22 = '0' OR CREC.F22 = GLOCALPORT THEN
            CREC.F29 := 'II'; -- IMPORT
          ELSE
            CREC.F29 := 'TL'; -- TS LOCAL
          END IF;
        ELSE
          CREC.F29 := 'OT'; -- OTHERS
        END IF;
      ELSE
        IF CREC.F29 = '3' OR CREC.F29 = '7' OR CREC.F29 = '11' OR
           CREC.F29 = '12' OR CREC.F29 = '15' OR CREC.F29 = '16' OR
           CREC.F29 = '17' OR CREC.F29 = '18' OR CREC.F29 = '19' THEN
          CREC.F29 := 'II'; -- IMPORT
        ELSIF CREC.F29 = '6' OR CREC.F29 = '13' THEN
          CREC.F29 := 'TL'; -- TS LOCAL
        ELSIF CREC.F29 = '14' THEN
          CREC.F29 := 'TI'; -- TS IMPORT
        ELSE
          -- OTHERS
          -- CREC.F29:='OT';
          -- DISCHARGE PORT(KRPUS)
          IF SUBSTR(CREC.F21, 3, 3) = SUBSTR(GLOCALPORT, 3, 3) THEN
            CREC.F29 := 'II'; -- IMPORT
          ELSE
            CREC.F29 := 'OT'; -- OTHERS
          END IF;
        END IF;
      END IF;
    
      -- (6) POL : LOADING PORT CHECK
      IF CREC.F20 IS NOT NULL THEN
      
        /* PORT/COUNTRY(PUSKR)
        CREC.F20 := SUBSTR(CREC.F20,3,3) ||SUBSTR(CREC.F20,1,2);
        */
      
        /* VVD PORT (LENGHT 3 OK: FIND)  */
        
        -- PORT MAPPING(P,I,CODE)
        MPORT := '';
        MPORT := FUN_MAPP_PORTOPR('P', 'I', CREC.F20);
        IF MPORT IS NOT NULL THEN
          CREC.F20 := MPORT;      --##CDG_MAPPING##
        END IF;       
        
        GPORT := PKG_EDI_CHECK.FINDPORT(GVSLVOY, CREC.F20);
        IF GPORT IS NOT NULL THEN
          CREC.F20 := GPORT;
        END IF;
      
        IF GPORT IS NULL THEN
          GPORT := PKG_EDI_CHECK.CHPORT(CREC.F20);
          IF GPORT IS NULL THEN
            XPORTINSERT := VPORTCODE_INSERT(CREC.F20); --PORT CODE(ZZ,XX)
            IF XPORTINSERT IS NULL THEN
              ERR_CREC.ECN04 := CREC.F20;
              ERR_CREC.ECD04 := '081'; --Loading Port is not exist.(Define > Code > Port Code)     ##CDG_PORT##
              GERRPART       := FALSE;
            END IF;
          ELSE
            CREC.F20 := GPORT;
          END IF;
        END IF;
      
      END IF;
    
      -- (7) POD : DISCHARGE PORT CHECK
      IF CREC.F21 IS NOT NULL THEN
      
        /* PORT/COUNTRY(PUSKR)
        CREC.F21 := SUBSTR(CREC.F21,3,3) || SUBSTR(CREC.F21,1,2);
        */

        -- PORT MAPPING(P,I,CODE)
        MPORT := '';
        MPORT := FUN_MAPP_PORTOPR('P', 'I', CREC.F21);
        IF MPORT IS NOT NULL THEN
          CREC.F21 := MPORT;      --##CDG_MAPPING##
        END IF;

        IF CREC.F29 = 'OT' THEN
          -- OTHERS(CLASS)
        
          GPORT := PKG_EDI_CHECK.FINDPORT(GVSLVOY, CREC.F21);
          IF GPORT IS NOT NULL THEN
            CREC.F21 := GPORT;
          END IF;
        
          IF GPORT IS NULL THEN
            GPORT := PKG_EDI_CHECK.CHPORT(CREC.F21);
          
            /* Vessel/Voyage Port Not Exist */
            /*
            IF gPORT IS NULL THEN
            ERR_CREC.ECN05:=CREC.F21;
            ERR_CREC.ECD05:='090';
            gERRPART:=FALSE;
            END IF;
            */
            IF GPORT IS NULL THEN
              XPORTINSERT := VPORTCODE_INSERT(CREC.F21); --PORT CODE(ZZ,XX)
              IF XPORTINSERT IS NULL THEN
                ERR_CREC.ECN05 := CREC.F21;
                ERR_CREC.ECD05 := '083'; --Througo Caro Port is not exist.(Define > Code > Port Code)     ##CDG_PORT##
                GERRPART       := FALSE;
              END IF;
            ELSE
              CREC.F21 := GPORT;
            END IF;
          END IF;
        
        ELSE
          CREC.F21 := GLOCALPORT;
        END IF;
      
      ELSE
        /* Vessel/Voyage Port Not Exist */
        ERR_CREC.ECN05 := CREC.F21;
        ERR_CREC.ECD05 := '090'; --Discharging Port is not exist.(Define > Code > Port Code)     ##CDG_PORT##
        GERRPART       := FALSE;
      END IF;
    
      -- (8) FPOD : DESTINATION PORT CHECK
      IF CREC.F22 IS NOT NULL THEN
      
        /* PORT/COUNTRY(PUSKR)
        CREC.F22:=SUBSTR(CREC.F22,3,3) || SUBSTR(CREC.F22,1,2);
        */
      
        /* VVD PORT (LENGHT 3 OK: FIND)  */
        
        -- PORT MAPPING(P,I,CODE)
        MPORT := '';
        MPORT := FUN_MAPP_PORTOPR('P', 'I', CREC.F22);
        IF MPORT IS NOT NULL THEN
          CREC.F22 := MPORT;      --##CDG_MAPPING##
        END IF;
        
        GPORT := PKG_EDI_CHECK.FINDPORT(GVSLVOY, CREC.F22);
        IF GPORT IS NOT NULL THEN
          CREC.F22 := GPORT;
        END IF;
      
        IF GPORT IS NULL THEN
          GPORT := PKG_EDI_CHECK.CHPORT(CREC.F22);
          IF GPORT IS NULL THEN
            GPORT := CREC.F22;
            /* PORT CODE(ZZ,XX) === */
            /*  xPORTINSERT := VPORTCODE_INSERT(CREC.F22);
             IF xPORTINSERT IS NULL THEN
                ERR_CREC.ECN06:=CREC.F22;
                ERR_CREC.ECD06:='082';
                gERRPART:=FALSE;
            END IF;
            */
          ELSE
            CREC.F22 := GPORT;
          END IF;
        END IF;
      END IF;
    
      /* ==== (9)OVERSLOT CHECK ==================================== */
      IF CREC.F23 = '1' THEN
        GOVERCONT := '';
        GOVERRET  := '';
        XOVER     := '';
        XFCNT     := '';
        XBCNT     := '';
        XLCNT     := '';
        XRCNT     := '';
        XTCNT     := '';
        CREC.F49  := ''; -- OVERSLOT
        XOVERFLAG := TRUE;
      
      ELSIF CREC.F23 != '1' OR CREC.F23 IS NULL THEN
        XOVER     := 'OVERSLOT';
        XOVERFLAG := FALSE;
        CREC.F24  := RTRIM(SUBSTR(CREC.F24, 2, 6));
      
        IF CREC.F24 IS NOT NULL THEN
          IF CREC.F03 != CREC.F24 THEN
            GLEADSTOW := PKG_EDI_CHECK.CHSTOW(GVSLCODE, CREC.F24);
            IF GLEADSTOW IS NULL THEN
              ERR_CREC.ECN07 := CREC.F24;
              ERR_CREC.ECD07 := '072'; --Leading Stowage Not Exist ##무슨 값인지 확인 필요##
              GERRPART       := FALSE;
            END IF;
          ELSE
            XOVERFLAG := TRUE;
          END IF;
        END IF;
      
        IF CREC.F26 IS NOT NULL THEN --F26=CONT_NO
          GOVERCONT := CREC.F26;
          XOVERFLAG := TRUE;
          XFCNT     := '';
          XBCNT     := '';
          XLCNT     := '';
          XRCNT     := '';
          XTCNT     := '';
        
        ELSIF CREC.F26 IS NULL THEN
        
          IF ERR_CREC.ECD07 IS NULL THEN
            CREC.F26 := GOVERCONT;
            GOVERRET := PKG_EDI_CHECK.GETOVER(GVSLCODE, CREC.F24, CREC.F03);
          
            IF GOVERRET IS NOT NULL THEN
              GOVERCHK := PKG_EDI_CHECK.VPIECE(GOVERRET, ':', 1);
              GCNTOVER := PKG_EDI_CHECK.VPIECE(GOVERRET, ':', 2);
              IF GOVERCHK = 'F' THEN
                --FRONT
                -- xFCNT:=CREC.F03;
                XFCNT := GCNTOVER;
              ELSIF GOVERCHK = 'B' THEN
                --BACK
                -- xBCNT:=CREC.F03;
                XBCNT := GCNTOVER;
              ELSIF GOVERCHK = 'L' THEN
                --LEFT
                -- xLCNT:=CREC.F03;
                XLCNT := GCNTOVER;
              ELSIF GOVERCHK = 'R' THEN
                --RIGHT
                -- xRCNT:=CREC.F03;
                XRCNT := GCNTOVER;
              ELSIF GOVERCHK = 'T' THEN
                --TIER
                -- xTCNT:=CREC.F03;
                XTCNT := GCNTOVER;
              END IF;
            
              CREC.F49 := XFCNT || '/' || XBCNT || '/' || XLCNT;
              CREC.F49 := CREC.F49 || '/' || XRCNT || '/' || XTCNT;
            ELSE
              CREC.F49 := '////';--'ERROR' || '/' || CREC.F03;
            END IF;
          
            -- UPDATE OVERSLOT
            CBAPLIESQL := PKG_EDI_VESSEL.BAPLIE_CHILD(GVSLVOY, CREC.F26);
            IF CBAPLIESQL IS NOT NULL THEN
              -- BAPLIE
              UPDATE ETV_BAPLIE_CONT
                 SET ETV_CBAP_OVERSLOT = CREC.F49
               WHERE ETV_CBAP_VESSEL = GVSLCODE
                 AND ETV_CBAP_VOYAGE = GVOYAGE
                 AND ETV_CBAP_CONTNO = CREC.F26;
            END IF;
          END IF; -- END OF ERROR ECD07
        
        END IF; -- END OF F26
      END IF;
      /* ====== END OF OVERSLOT =============================================== */
    
      -- DBMS_OUTPUT.PUT_LINE('AA90:' || CREC.F49);
    
      -- (10) OPERATOR CHECK
      /* ======
      IF CREC.F48='SKR' THEN
          CREC.F48:='SNK';
      ELSIF CREC.F48='UAC' THEN
          CREC.F48:='UAS';
      END IF;
      ========== */
      -- OPERATOR MAPPTING(R,I,CODE)
      MOPER := FUN_MAPP_PORTOPR('R', 'I', CREC.F48);
      IF MOPER IS NOT NULL THEN
        CREC.F48 := MOPER;      --##CDG_MAPPING##
      END IF;
    
      IF CREC.F48 IS NOT NULL THEN
      
        -- gOPER:=PKG_EDI_CHECK.CHOPER(gVSLVOY,CREC.F48);
        GOPER := VOPER_CHECK(CREC.F48); --##CDG_OPERATOR##
      
        IF GOPER IS NULL THEN
          ERR_CREC.ECN08 := CREC.F48;
          --ERR_CREC.ECD08:='060';               -- Vessel/Voyage Operator Not Exist
          ERR_CREC.ECD08 := '061'; -- Operator is not registered.(CODE > Operator Code).      ##CDG_OPERATOR##
          GERRPART       := FALSE;
        END IF;
      ELSIF CREC.F48 IS NULL THEN
        ERR_CREC.ECN08 := '';
        ERR_CREC.ECD08 := '050'; -- Operator is missing in BAPLIE.
        GERRPART       := FALSE;
      END IF;
    
      -- (11) COMMODITY FORMATTING (FM, IMDG, TEMP)
      CREC.F50 := PKG_EDI_CHECK.GET_COMMODITY(CREC.F28, CREC.F40, CREC.F17);
    
      --(11-1) REEFER CHECK(AGAIN)
      IF CREC.F17 IS NOT NULL THEN
        IF CREC.F28 = 'F' AND CREC.F40 IS NOT NULL THEN
          IF CREC.F50 <> 'RH' THEN
            CREC.F50 := 'RH';
            XOVER    := 'REEFER HAZAROUS';
          END IF;
        END IF;
      END IF;
    
      CREC.F51 := ''; -- SHIFT STOWAGE
      CREC.F52 := ''; -- DANGEROUS FIRE
      CREC.F53 := XOVER; -- REMARK
    
      -- (12) CONTAINER TYPE CHECK
      IF GISO IS NOT NULL THEN
        CREC.F54 := PKG_EDI_CHECK.CHCONTTYPE(SUBSTR(CREC.F27, 3, 2));
      ELSE
        CREC.F54 := '';
      END IF;

      IF CREC.F54 IS NULL THEN
          ERR_CREC.ECN09 := '';
          ERR_CREC.ECD09 := '380'; --Incorrect Container Type
          GERRPART       := FALSE;
      END IF;
    
      CREC.F55 := ''; -- TRUCK CODE
    
      /* CONTAINER SPECIAL TYPE CHECK(TYPE,OOG,FM) */
      CREC.F56 := '';
      CREC.F56 := PKG_EDI_CHECK.GET_SPECIAL_TYPE(CREC.F54,
                                                 CREC.F49,
                                                 CREC.F28);
    
      CREC.F57 := ''; -- DAMAGE(MANUAL INPUT)
      CREC.F58 := XACCDATE; -- RECEIVE DATE
      CREC.F59 := XACCTIME; -- RECEIVE TIME
    
      IF V_NEST_CONT_LIST = '' OR V_NEST_CONT_LIST IS NULL THEN
        CREC.F60 := ''; -- NEST CHECK
        CREC.F61 := ''; -- NEST CONTAINER
      ELSE
        CREC.F60 := 'Y'; -- NEST CHECK
        CREC.F61 := ''; -- NEST CONTAINER
      END IF;
      
      /* POR : PORT OF ORIGIN CHECK */
      IF CREC.F62 IS NOT NULL THEN
        -- PORT MAPPING(P,I,CODE)
        MPORT := '';
        MPORT := FUN_MAPP_PORTOPR('P', 'I', CREC.F62);
        IF MPORT IS NOT NULL THEN
          CREC.F62 := MPORT;      --##CDG_MAPPING##
        END IF;
      END IF;
      
      /* NPOD : NEXT PORT CHECK */
      IF CREC.F63 IS NOT NULL THEN
        /* VVD PORT (LENGHT 3 OK: FIND)  */
        
        -- PORT MAPPING(P,I,CODE)
        MPORT := '';
        MPORT := FUN_MAPP_PORTOPR('P', 'I', CREC.F63);
        IF MPORT IS NOT NULL THEN
          CREC.F63 := MPORT;      --##CDG_MAPPING##
        END IF;
        
        GPORT := PKG_EDI_CHECK.FINDPORT(GVSLVOY, CREC.F63);
        IF GPORT IS NOT NULL THEN
          CREC.F63 := GPORT;
        END IF;
      
        IF GPORT IS NULL THEN
          GPORT := PKG_EDI_CHECK.CHPORT(CREC.F63);
          IF GPORT IS NULL THEN
            GPORT := CREC.F63;
          
          ELSE
            CREC.F63 := GPORT;
          END IF;
        END IF;
      END IF;
    
      /*  NOT OVERSLOT     */
      IF XOVERFLAG = TRUE THEN
      
        IF GERRPART = FALSE THEN
          -- ERROR OCCURED
          -- REC02 DATA
          ERRLOG.VDATA := CREC.F03 || CREC.F04 || CREC.F05 || CREC.F06 ||
                          CREC.F07;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F08 || CREC.F09 || CREC.F10 ||
                          CREC.F11;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F12 || CREC.F13 || CREC.F14 ||
                          CREC.F15;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F16 || CREC.F17 || CREC.F18 ||
                          CREC.F19;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F20 || CREC.F21 || CREC.F22 ||
                          CREC.F23;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F24 || CREC.F25 || CREC.F26 ||
                          CREC.F27;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F28 || CREC.F29 || CREC.F30 ||
                          CREC.F31;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F32 || CREC.F33 || CREC.F34 ||
                          CREC.F35;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F36 || CREC.F37 || CREC.F38 ||
                          CREC.F39;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F40 || CREC.F41 || CREC.F42 ||
                          CREC.F43;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F44 || CREC.F45 || CREC.F46 ||
                          CREC.F47;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F48 || CREC.F49 || CREC.F50 ||
                          CREC.F51;
          ERRLOG.VDATA := ERRLOG.VDATA || CREC.F52 || CREC.F53 || CREC.F54 ||
                          CREC.F55 || CREC.F56;
        
          ERRLOG.VERRINFO := ERR_CREC.ECN01 || '+' || ERR_CREC.ECN02 || '+' ||
                             ERR_CREC.ECN03;
          ERRLOG.VERRINFO := ERRLOG.VERRINFO || '+' || ERR_CREC.ECN04 || '+' ||
                             ERR_CREC.ECN05;
          ERRLOG.VERRINFO := ERRLOG.VERRINFO || '+' || ERR_CREC.ECN06 || '+' ||
                             ERR_CREC.ECN07;
          ERRLOG.VERRINFO := ERRLOG.VERRINFO || '+' || ERR_CREC.ECN08 || '+' || ERR_CREC.ECN09;
        
          ERRLOG.VERRDESC := ERR_CREC.ECD01 || '+' || ERR_CREC.ECD02 || '+' ||
                             ERR_CREC.ECD03;
          ERRLOG.VERRDESC := ERRLOG.VERRDESC || '+' || ERR_CREC.ECD04 || '+' ||
                             ERR_CREC.ECD05;
          ERRLOG.VERRDESC := ERRLOG.VERRDESC || '+' || ERR_CREC.ECD06 || '+' ||
                             ERR_CREC.ECD07;
          ERRLOG.VERRDESC := ERRLOG.VERRDESC || '+' || ERR_CREC.ECD08 || '+' || ERR_CREC.ECD09;
        ELSIF GERRPART = TRUE THEN
          ERRLOG.VDATA    := '';
          ERRLOG.VERRINFO := '';
          ERRLOG.VERRDESC := '';
        END IF;
      
        /* ======= ERROR LOG FILE, BAPLIE CONTAINER (INSERT) ================ */
        IF CREC.F26 IS NOT NULL AND CREC.F03 IS NOT NULL THEN
          -- SHIP PLAN (STOWAGE CHECK :F03)
        
          IF GERRPART = FALSE THEN
            -- ERROR LOG INSERT
            CERRORSQL := PKG_EDI_VESSEL.ERROR_LOG_DATA(VERRFILE,
                                                       HREC.H01,
                                                       CREC.F26);
            IF CERRORSQL IS NOT NULL THEN
              -- ERROR LOG(DULPPLICATION)
              DELETE FROM ETC_ERRLOG
               WHERE ETC_ER_LOGFILE = VERRFILE
                 AND ETC_ER_EDOCID = HREC.H01
                 AND ETC_ER_CSNAME = CREC.F26;
            END IF;
          
            INSERT INTO ETC_ERRLOG
              (ETC_ER_LOGFILE,
               ETC_ER_EDOCID,
               ETC_ER_CSNAME,
               ETC_ER_DATA,
               ETC_ER_INFO,
               ETC_ER_DESC,
               ETC_ER_MESSAGE,
               ETC_ER_ACCEDATE,
               ETC_ER_ACCETIME,
               ETC_ER_ACCE_DT,
               CRE_USR_ID,
               CRE_DT,
               UPD_USR_ID,
               UPD_DT)
            VALUES
              (VERRFILE,
               HREC.H01,
               CREC.F26,
               ERRLOG.VDATA,
               ERRLOG.VERRINFO,
               ERRLOG.VERRDESC,
               HREC.R03,
               XACCDATE,
               XACCTIME,
               XACCDATE || XACCTIME,
               'EDI',
               SYSDATE,
               'EDI',
               SYSDATE);
          END IF;
        
          -- BAPLIE TABLE (CHILD)
          IF GERRPART = TRUE THEN
            PCNT := PCNT + 1; -- PROCESS CONTAINER
          
            -- SELECT BAPLIE CHILD TABLE
            CBAPLIESQL := PKG_EDI_VESSEL.BAPLIE_CHILD(GVSLVOY, CREC.F26);
            IF CBAPLIESQL IS NOT NULL THEN
            
              CERRORSQL := PKG_EDI_VESSEL.ERROR_LOG_DATA(VERRFILE,
                                                         HREC.H01,
                                                         CREC.F26);
              IF CERRORSQL IS NOT NULL THEN
                -- ERROR LOG(DULPPLICATION)
                DELETE FROM ETC_ERRLOG
                 WHERE ETC_ER_LOGFILE = VERRFILE
                   AND ETC_ER_EDOCID = HREC.H01
                   AND ETC_ER_CSNAME = CREC.F26;
              END IF;
              INSERT INTO ETC_ERRLOG
                (ETC_ER_LOGFILE,
                 ETC_ER_EDOCID,
                 ETC_ER_CSNAME,
                 ETC_ER_DATA,
                 ETC_ER_INFO,
                 ETC_ER_DESC,
                 ETC_ER_MESSAGE,
                 ETC_ER_ACCEDATE,
                 ETC_ER_ACCETIME,
                 ETC_ER_ACCE_DT,
                 CRE_USR_ID,
                 CRE_DT,
                 UPD_USR_ID,
                 UPD_DT)
              VALUES
                (VERRFILE,
                 HREC.H01,
                 CREC.F26,
                 CREC.F03 || '-' || CREC.F26,
                 CREC.F26,
                 'Duplication',
                 HREC.R03,
                 XACCDATE,
                 XACCTIME,
                 XACCDATE || XACCTIME,
                 'EDI',
                 SYSDATE,
                 'EDI',
                 SYSDATE);
            
              -- DELETE BAPLIE CHILD(CONTAINER)
              DELETE FROM ETV_BAPLIE_CONT
               WHERE ETV_CBAP_VESSEL = GVSLCODE
                 AND ETV_CBAP_VOYAGE = GVOYAGE
                 AND ETV_CBAP_CONTNO = CREC.F26;
            
            END IF;
          
            -- BAPLIE CHILD INSERT
            INSERT INTO ETV_BAPLIE_CONT
              (ETV_CBAP_DOCSEND,
               ETV_CBAP_VESSEL,
               ETV_CBAP_VOYAGE,
               ETV_CBAP_CONTSTWG,
               ETV_CBAP_GROSWQAL,
               ETV_CBAP_GROSWGHT,
               ETV_CBAP_OLENFQAL,
               ETV_CBAP_OLENFRNT,
               ETV_CBAP_OLENBQAL,
               ETV_CBAP_OLENBACK,
               ETV_CBAP_OWIDLQAL,
               ETV_CBAP_OWIDLEFT,
               ETV_CBAP_OWIDRQAL,
               ETV_CBAP_OWIDRGHT,
               ETV_CBAP_OVERHQAL,
               ETV_CBAP_OVERHIGH,
               ETV_CBAP_TMPRQULF,
               ETV_CBAP_TMPRCONT,
               ETV_CBAP_TMPRMIN,
               ETV_CBAP_TMPRMAX,
               ETV_CBAP_ORGNPORT,
               ETV_CBAP_DCHGPORT,
               ETV_CBAP_DESTPORT,
               ETV_CBAP_REFNVLBM,
               ETV_CBAP_REFNVLET,
               ETV_CBAP_CONTQULF,
               ETV_CBAP_CONTNO,
               ETV_CBAP_CONTISO,
               ETV_CBAP_FULLEMPT,
               ETV_CBAP_CLASS,
               ETV_CBAP_ATCHQAL1,
               ETV_CBAP_ATCHVAL1,
               ETV_CBAP_ATCHQAL2,
               ETV_CBAP_ATCHVAL2,
               ETV_CBAP_ATCHQAL3,
               ETV_CBAP_ATCHVAL3,
               ETV_CBAP_ATCHQAL4,
               ETV_CBAP_ATCHVAL4,
               ETV_CBAP_ATCHQAL5,
               ETV_CBAP_ATCHVAL5,
               ETV_CBAP_DNGRIMDG,
               ETV_CBAP_IMDGPAGE,
               ETV_CBAP_DNGRUNNO,
               ETV_CBAP_DNGRFQUL,
               ETV_CBAP_DNGRFLSH,
               ETV_CBAP_DNGRPACK,
               ETV_CBAP_DNGREMS,
               ETV_CBAP_DNGRMFAG,
               ETV_CBAP_CONTOPER,
               ETV_CBAP_OVERSLOT,
               ETV_CBAP_CONTCOMM,
               ETV_CBAP_SHFTSTWG,
               ETV_CBAP_DNGRFIRE,
               ETV_CBAP_PLANCONFIRM,
               ETV_CBAP_DIRECTDELV,
               ETV_CBAP_NEXTVESSEL,
               ETV_CBAP_NEXTVOYAGE,
               ETV_CBAP_CONTRMKS,
               ETV_CBAP_CONTTYPE,
               ETV_CBAP_TRCKCODE,
               ETV_CBAP_SPECIALTYPE,
               ETV_CBAP_DAMAGE,
               ETV_CBAP_RECVDATE,
               ETV_CBAP_RECVTIME,
               ETV_CBAP_NESTCHK,
               ETV_CBAP_NESTCONT,
               ETV_CBAP_RECV_DT,
               ETV_BKG_RECV_DT,
               ETV_CBAP_CRSTAMP,
               CRE_USR_ID,
               CRE_DT,
               UPD_USR_ID,
               UPD_DT,
               ETV_CBAP_NEXTPORT,
               ETV_CBAP_POR,
               ETV_CBAP_GROUPCODE,
               BIL_NO,
               /* 2016.05.17 VGM ADD - 9015707 */
               MEAS_WGT,
               MEAS_MZD_CD,
               MEAS_CERTI_NO,
               MEAS_DT,
               MEAS_PSON_SIG1,
               MEAS_PSON_SIG2,
               MEAS_PSON_SIG3,
               MEAS_PSON_SIG4)
            VALUES
              (HREC.H03,
               GVSLCODE,
               GVOYAGE,
               CREC.F03,
               CREC.F04,
               CREC.F05,
               CREC.F06,
               CREC.F07,
               CREC.F08,
               CREC.F09,
               CREC.F10,
               CREC.F11,
               CREC.F12,
               CREC.F13,
               CREC.F14,
               CREC.F15,
               CREC.F16,
               CREC.F17,
               CREC.F18,
               CREC.F19,
               CREC.F20,
               CREC.F21,
               CREC.F22,
               CREC.F23,
               CREC.F24,
               CREC.F25,
               CREC.F26,
               CREC.F27,
               CREC.F28,
               CREC.F29,
               CREC.F30,
               CREC.F31,
               CREC.F32,
               CREC.F33,
               CREC.F34,
               CREC.F35,
               CREC.F36,
               CREC.F37,
               CREC.F38,
               CREC.F39,
               CREC.F40,
               CREC.F41,
               CREC.F42,
               CREC.F43,
               CREC.F44,
               CREC.F45,
               CREC.F46,
               CREC.F47,
               CREC.F48,
               CREC.F49,
               CREC.F50,
               CREC.F51,
               CREC.F52,
               '',
               '',
               '',
               '',
               CREC.F53,
               CREC.F54,
               CREC.F55,
               CREC.F56,
               CREC.F57,
               CREC.F58,
               CREC.F59,
               CREC.F60,
               CREC.F61,
               CREC.F58 || CREC.F59,
               '',
               '',
               'EDI',
               SYSDATE,
               'EDI',
               SYSDATE,
               CREC.F63,
               CREC.F62,
               '',
               '',
               /* 2016.05.17 VGM ADD - 9015707 */
               CREC.F71,
               CREC.F72,
               CREC.F73,
               CREC.F74,
               CREC.F75,
               CREC.F76,
               CREC.F77,
               CREC.F78);
          
            -- NEST CONTAINER INSERT 
            BEGIN
              IF CREC.F60 = 'Y' THEN
                -- IF NEST CONTAINER
                I := 1;
                N := PKG_UTIL.VSTRINGINQTY(V_NEST_CONT_LIST, ',');
              
                FOR I IN 1 .. N LOOP
                  V_NEST_CONT := PKG_UTIL.VPIECE(V_NEST_CONT_LIST, ',', I);
                  INSERT INTO ETV_BAPLIE_CONT
                    (ETV_CBAP_DOCSEND,
                     ETV_CBAP_VESSEL,
                     ETV_CBAP_VOYAGE,
                     ETV_CBAP_CONTSTWG,
                     ETV_CBAP_GROSWQAL,
                     ETV_CBAP_GROSWGHT,
                     ETV_CBAP_OLENFQAL,
                     ETV_CBAP_OLENFRNT,
                     ETV_CBAP_OLENBQAL,
                     ETV_CBAP_OLENBACK,
                     ETV_CBAP_OWIDLQAL,
                     ETV_CBAP_OWIDLEFT,
                     ETV_CBAP_OWIDRQAL,
                     ETV_CBAP_OWIDRGHT,
                     ETV_CBAP_OVERHQAL,
                     ETV_CBAP_OVERHIGH,
                     ETV_CBAP_TMPRQULF,
                     ETV_CBAP_TMPRCONT,
                     ETV_CBAP_TMPRMIN,
                     ETV_CBAP_TMPRMAX,
                     ETV_CBAP_ORGNPORT,
                     ETV_CBAP_DCHGPORT,
                     ETV_CBAP_DESTPORT,
                     ETV_CBAP_REFNVLBM,
                     ETV_CBAP_REFNVLET,
                     ETV_CBAP_CONTQULF,
                     ETV_CBAP_CONTNO,
                     ETV_CBAP_CONTISO,
                     ETV_CBAP_FULLEMPT,
                     ETV_CBAP_CLASS,
                     ETV_CBAP_ATCHQAL1,
                     ETV_CBAP_ATCHVAL1,
                     ETV_CBAP_ATCHQAL2,
                     ETV_CBAP_ATCHVAL2,
                     ETV_CBAP_ATCHQAL3,
                     ETV_CBAP_ATCHVAL3,
                     ETV_CBAP_ATCHQAL4,
                     ETV_CBAP_ATCHVAL4,
                     ETV_CBAP_ATCHQAL5,
                     ETV_CBAP_ATCHVAL5,
                     ETV_CBAP_DNGRIMDG,
                     ETV_CBAP_IMDGPAGE,
                     ETV_CBAP_DNGRUNNO,
                     ETV_CBAP_DNGRFQUL,
                     ETV_CBAP_DNGRFLSH,
                     ETV_CBAP_DNGRPACK,
                     ETV_CBAP_DNGREMS,
                     ETV_CBAP_DNGRMFAG,
                     ETV_CBAP_CONTOPER,
                     ETV_CBAP_OVERSLOT,
                     ETV_CBAP_CONTCOMM,
                     ETV_CBAP_SHFTSTWG,
                     ETV_CBAP_DNGRFIRE,
                     ETV_CBAP_PLANCONFIRM,
                     ETV_CBAP_DIRECTDELV,
                     ETV_CBAP_NEXTVESSEL,
                     ETV_CBAP_NEXTVOYAGE,
                     ETV_CBAP_CONTRMKS,
                     ETV_CBAP_CONTTYPE,
                     ETV_CBAP_TRCKCODE,
                     ETV_CBAP_SPECIALTYPE,
                     ETV_CBAP_DAMAGE,
                     ETV_CBAP_RECVDATE,
                     ETV_CBAP_RECVTIME,
                     ETV_CBAP_NESTCHK,
                     ETV_CBAP_NESTCONT,
                     ETV_CBAP_RECV_DT,
                     ETV_BKG_RECV_DT,
                     ETV_CBAP_CRSTAMP,
                     CRE_USR_ID,
                     CRE_DT,
                     UPD_USR_ID,
                     UPD_DT,
                     ETV_CBAP_NEXTPORT,
                     ETV_CBAP_POR,
                     ETV_CBAP_GROUPCODE,
                     BIL_NO,
                     /* 2016.05.17 VGM ADD - 9015707 */
                     MEAS_WGT,
                     MEAS_MZD_CD,
                     MEAS_CERTI_NO,
                     MEAS_DT,
                     MEAS_PSON_SIG1,
                     MEAS_PSON_SIG2,
                     MEAS_PSON_SIG3,
                     MEAS_PSON_SIG4)
                  VALUES
                    (HREC.H03,
                     GVSLCODE,
                     GVOYAGE,
                     CREC.F03,
                     CREC.F04,
                     CREC.F05,
                     CREC.F06,
                     CREC.F07,
                     CREC.F08,
                     CREC.F09,
                     CREC.F10,
                     CREC.F11,
                     CREC.F12,
                     CREC.F13,
                     CREC.F14,
                     CREC.F15,
                     CREC.F16,
                     CREC.F17,
                     CREC.F18,
                     CREC.F19,
                     CREC.F20,
                     CREC.F21,
                     CREC.F22,
                     CREC.F23,
                     CREC.F24,
                     CREC.F25,
                     --CREC.F26,
                     V_NEST_CONT,
                     CREC.F27,
                     CREC.F28,
                     CREC.F29,
                     NULL,
                     NULL,
                     NULL,
                     NULL,
                     NULL,
                     NULL,
                     NULL,
                     NULL,
                     NULL,
                     NULL,
                     /*
                     CREC.F30,
                     CREC.F31,
                     CREC.F32,
                     CREC.F33,
                     CREC.F34,
                     CREC.F35,
                     CREC.F36,
                     CREC.F37,
                     CREC.F38,
                     CREC.F39,*/
                     
                     CREC.F40,
                     CREC.F41,
                     CREC.F42,
                     CREC.F43,
                     CREC.F44,
                     CREC.F45,
                     CREC.F46,
                     CREC.F47,
                     CREC.F48,
                     CREC.F49,
                     CREC.F50,
                     CREC.F51,
                     CREC.F52,
                     '',
                     '',
                     '',
                     '',
                     CREC.F53,
                     CREC.F54,
                     CREC.F55,
                     CREC.F56,
                     CREC.F57,
                     CREC.F58,
                     CREC.F59,
                     CREC.F60,
                     --CREC.F61,
                     CREC.F26, -- MASTER CONTAINER
                     CREC.F58 || CREC.F59,
                     '',
                     '',
                     'EDI',
                     SYSDATE,
                     'EDI',
                     SYSDATE,
                     CREC.F63,
                     CREC.F62,
                     '',
                     '',
                     /* 2016.05.17 VGM ADD - 9015707 */
                     CREC.F71,
                     CREC.F72,
                     CREC.F73,
                     CREC.F74,
                     CREC.F75,
                     CREC.F76,
                     CREC.F77,
                     CREC.F78);
                     
              --START-- CYC_NEST INSERT 2014.0731    
                  DELETE FROM CYC_NEST
                   WHERE CYC_NEST_MAINCONTNO = CREC.F26
                     AND CYC_NEST_MAINPOINT = ( SELECT NVL(MAX(CYC_CONT_POINT), 0) + 1 FROM CYC_CONTAINER WHERE CYC_CONT_CONTNO = CREC.F26 )
                     AND CYC_NEST_CHILDCONTNO = V_NEST_CONT;
                  
                  INSERT INTO CYC_NEST
                    (CYC_NEST_MAINCONTNO, 
                    CYC_NEST_MAINPOINT, 
                    CYC_NEST_CHILDCONTNO, 
                    CYC_NEST_CHILDISO, 
                    CYC_NEST_STATUS, 
                    CYC_NEST_LOCATION, 
                    CYC_NEST_REMARK, 
                    CYC_NEST_DATE, 
                    CYC_NEST_TIME, 
                    CYC_NEST_USERID, 
                    CYC_NEST_TIER, 
                    CYC_NEST_CHILDPOINT, 
                    CYC_NEST_FRSTAND, 
                    CYC_NEST_FRTYPE, 
                    CYC_NEST_DAMAGE, 
                    CYC_NEST_DT, 
                    CRE_USR_ID, 
                    CRE_DT, 
                    UPD_USR_ID, 
                    UPD_DT, 
                    CRNT_PSN_IDX_NO1, 
                    CRNT_PSN_IDX_NO2, 
                    CRNT_PSN_IDX_NO3, 
                    CRNT_PSN_IDX_NO4)
                  VALUES
                    (CREC.F26,
                    ( SELECT NVL(MAX(CYC_CONT_POINT), 0) + 1 FROM CYC_CONTAINER WHERE CYC_CONT_CONTNO = CREC.F26 ),
                    V_NEST_CONT,
                    CREC.F27,
                    'M',
                    '',
                    '',
                    XACCDATE,
                    XACCTIME,
                    '',
                    '',
                    ( SELECT NVL(MAX(CYC_CONT_POINT), 0) + 1 FROM CYC_CONTAINER WHERE CYC_CONT_CONTNO = V_NEST_CONT ),
                    '',
                    '',
                    '',
                    '',
                    'EDI',
                    SYSDATE,
                    'EDI',
                    SYSDATE,
                    '',
                    '',
                    '',
                    ''
                    );             
              --END-- CYC_NEST INSERT 2014.0731
                  
                END LOOP;
              END IF;
            
            END;
            -- SELECT SHIPPLAN DISCHARGE CONTAINER TABLE (BICT TERMINAL 06.10.04)
            CPLANCONTSQL := PKG_EDI_VESSEL.SHIPPLAN_DISCONT(GVSLVOY,
                                                            CREC.F26);
          
            IF CPLANCONTSQL IS NOT NULL THEN
            
              -- DELETE SHIPPLAN DISCHARGE(CONTAINER)
              DELETE FROM VSP_SHIP
               WHERE VSP_SHP_VESSEL = GVSLCODE
                 AND VSP_SHP_VOYAGE = GVOYAGE
                 AND VSP_SHP_DISLOAD = 'D'
                 AND VSP_SHP_CONTNO = CREC.F26;
            
              DELETE FROM VSP_SHIP
               WHERE VSP_SHP_VESSEL = GVSLCODE
                 AND VSP_SHP_VOYAGE = GVOYAGE
                 AND VSP_SHP_DISLOAD = 'L'
                 AND VSP_SHP_CONTNO = CREC.F26
                 AND VSP_SHP_CLASS IN ('S1', 'S2');
            END IF;
          
            -- OVERSTORAGE(VALUE)
            IF CREC.F07 IS NULL AND CREC.F09 IS NULL AND CREC.F11 IS NULL AND
               CREC.F13 IS NULL AND CREC.F15 IS NULL THEN
              GOVERVALUE := '';
            ELSE
              GOVERVALUE := CREC.F07 || '/' || CREC.F09 || '/' || CREC.F11 || '/' ||
                            CREC.F13 || '/' || CREC.F15;
            END IF;
          
            GWEIGHT := TO_CHAR(TO_NUMBER(CREC.F05));
            IF CREC.F17 IS NULL THEN
              GTEMPER := '';
            ELSE
              GTEMPER := SUBSTR(TO_CHAR(TO_NUMBER(CREC.F17)), 1, 5);
            END IF;
          
            -- INSERT (VSP_SHIP)
            INSERT INTO VSP_SHIP
              (VSP_SHP_VESSEL,
               VSP_SHP_VOYAGE,
               VSP_SHP_DISLOAD,
               VSP_SHP_EXTJOB,
               VSP_SHP_STOWAGE,
               VSP_SHP_DH,
               VSP_SHP_INTSTOW,
               VSP_SHP_SHFTSTWG,
               VSP_SHP_CONTNO,
               VSP_SHP_CLASS,
               VSP_SHP_STATUS,
               VSP_SHP_ISO,
               VSP_SHP_COMMODITY,
               VSP_SHP_WEIGHT,
               VSP_SHP_TEMPER,
               VSP_SHP_HAZAIMDG,
               VSP_SHP_OPERATOR,
               VSP_SHP_CONTTYPE,
               VSP_SHP_OVERSLOT,
               VSP_SHP_OVERVALUE,
               VSP_SHP_PLANST,
               VSP_SHP_DIRECT,
               VSP_SHP_NEXTVESSEL,
               VSP_SHP_NEXTVOYAGE,
               VSP_SHP_DISCHPORT,
               VSP_SHP_ORGINPORT,
               VSP_SHP_FINALPORT,
               VSP_SHP_SPECIALTYPE,
               VSP_SHP_POR,
               VSP_SHP_NEXTPORT,
               BIL_NO,
               PGM_ID)
            
            VALUES
              (GVSLCODE,
               GVOYAGE,
               'D',
               GEXTJOB,
               CREC.F03,
               GDH,
               GINTSTOW,
               '',
               CREC.F26,
               CREC.F29,
               CREC.F28,
               CREC.F27,
               CREC.F50,
               GWEIGHT,
               GTEMPER,
               CREC.F40,
               CREC.F48,
               CREC.F54,
               CREC.F49,
               GOVERVALUE,
               'B',
               '',
               '',
               '',
               CREC.F21,
               CREC.F20,
               CREC.F22,
               CREC.F56,
               CREC.F62,
               CREC.F63,
               '',
               'BAPLIE');
          
          ELSIF GERRPART = FALSE THEN
          
            /*=== ERROR CONTAINER : OK
            (ERR_CREC.ECD03 :ISO (007,008), ERR_CREC.ECD08 :OPERATOR(050,061) ===  */
          
            /*=== COUNT(NOT INCLUDE (X) ========== */
            IF ERR_CREC.ECD01 IS NULL THEN
              -- STOWAGE EXIST
              IF (ERR_CREC.ECD03 IS NOT NULL) OR
                 (ERR_CREC.ECD04 IS NOT NULL) OR
                 (ERR_CREC.ECD05 IS NOT NULL) OR
                 (ERR_CREC.ECD08 IS NOT NULL) THEN
              
                -- SELECT BAPLIE CHILD TABLE
                CBAPLIESQL := PKG_EDI_VESSEL.BAPLIE_CHILD(GVSLVOY, CREC.F26);
                IF CBAPLIESQL IS NOT NULL THEN
                
                  CERRORSQL := PKG_EDI_VESSEL.ERROR_LOG_DATA(VERRFILE,
                                                             HREC.H01,
                                                             CREC.F26);
                  IF CERRORSQL IS NOT NULL THEN
                    -- ERROR LOG(DULPPLICATION)
                    DELETE FROM ETC_ERRLOG
                     WHERE ETC_ER_LOGFILE = VERRFILE
                       AND ETC_ER_EDOCID = HREC.H01
                       AND ETC_ER_CSNAME = CREC.F26;
                  END IF;
                  INSERT INTO ETC_ERRLOG
                    (ETC_ER_LOGFILE,
                     ETC_ER_EDOCID,
                     ETC_ER_CSNAME,
                     ETC_ER_DATA,
                     ETC_ER_INFO,
                     ETC_ER_DESC,
                     ETC_ER_MESSAGE,
                     ETC_ER_ACCEDATE,
                     ETC_ER_ACCETIME,
                     ETC_ER_ACCE_DT,
                     CRE_USR_ID,
                     CRE_DT,
                     UPD_USR_ID,
                     UPD_DT)
                  VALUES
                    (VERRFILE,
                     HREC.H01,
                     CREC.F26,
                     CREC.F03 || '-' || CREC.F26,
                     CREC.F26,
                     'Duplication',
                     HREC.R03,
                     XACCDATE,
                     XACCTIME,
                     XACCDATE || XACCTIME,
                     'EDI',
                     SYSDATE,
                     'EDI',
                     SYSDATE);
                
                  -- DELETE BAPLIE CHILD(CONTAINER)
                  DELETE FROM ETV_BAPLIE_CONT
                   WHERE ETV_CBAP_VESSEL = GVSLCODE
                     AND ETV_CBAP_VOYAGE = GVOYAGE
                     AND ETV_CBAP_CONTNO = CREC.F26;
                
                END IF;
              
                -- BAPLIE CHILD INSERT
                INSERT INTO ETV_BAPLIE_CONT
                  (ETV_CBAP_DOCSEND,
                   ETV_CBAP_VESSEL,
                   ETV_CBAP_VOYAGE,
                   ETV_CBAP_CONTSTWG,
                   ETV_CBAP_GROSWQAL,
                   ETV_CBAP_GROSWGHT,
                   ETV_CBAP_OLENFQAL,
                   ETV_CBAP_OLENFRNT,
                   ETV_CBAP_OLENBQAL,
                   ETV_CBAP_OLENBACK,
                   ETV_CBAP_OWIDLQAL,
                   ETV_CBAP_OWIDLEFT,
                   ETV_CBAP_OWIDRQAL,
                   ETV_CBAP_OWIDRGHT,
                   ETV_CBAP_OVERHQAL,
                   ETV_CBAP_OVERHIGH,
                   ETV_CBAP_TMPRQULF,
                   ETV_CBAP_TMPRCONT,
                   ETV_CBAP_TMPRMIN,
                   ETV_CBAP_TMPRMAX,
                   ETV_CBAP_ORGNPORT,
                   ETV_CBAP_DCHGPORT,
                   ETV_CBAP_DESTPORT,
                   ETV_CBAP_REFNVLBM,
                   ETV_CBAP_REFNVLET,
                   ETV_CBAP_CONTQULF,
                   ETV_CBAP_CONTNO,
                   ETV_CBAP_CONTISO,
                   ETV_CBAP_FULLEMPT,
                   ETV_CBAP_CLASS,
                   ETV_CBAP_ATCHQAL1,
                   ETV_CBAP_ATCHVAL1,
                   ETV_CBAP_ATCHQAL2,
                   ETV_CBAP_ATCHVAL2,
                   ETV_CBAP_ATCHQAL3,
                   ETV_CBAP_ATCHVAL3,
                   ETV_CBAP_ATCHQAL4,
                   ETV_CBAP_ATCHVAL4,
                   ETV_CBAP_ATCHQAL5,
                   ETV_CBAP_ATCHVAL5,
                   ETV_CBAP_DNGRIMDG,
                   ETV_CBAP_IMDGPAGE,
                   ETV_CBAP_DNGRUNNO,
                   ETV_CBAP_DNGRFQUL,
                   ETV_CBAP_DNGRFLSH,
                   ETV_CBAP_DNGRPACK,
                   ETV_CBAP_DNGREMS,
                   ETV_CBAP_DNGRMFAG,
                   ETV_CBAP_CONTOPER,
                   ETV_CBAP_OVERSLOT,
                   ETV_CBAP_CONTCOMM,
                   ETV_CBAP_SHFTSTWG,
                   ETV_CBAP_DNGRFIRE,
                   ETV_CBAP_PLANCONFIRM,
                   ETV_CBAP_DIRECTDELV,
                   ETV_CBAP_NEXTVESSEL,
                   ETV_CBAP_NEXTVOYAGE,
                   ETV_CBAP_CONTRMKS,
                   ETV_CBAP_CONTTYPE,
                   ETV_CBAP_TRCKCODE,
                   ETV_CBAP_SPECIALTYPE,
                   ETV_CBAP_DAMAGE,
                   ETV_CBAP_RECVDATE,
                   ETV_CBAP_RECVTIME,
                   ETV_CBAP_NESTCHK,
                   ETV_CBAP_NESTCONT,
                   ETV_CBAP_RECV_DT,
                   ETV_BKG_RECV_DT,
                   ETV_CBAP_CRSTAMP,
                   CRE_USR_ID,
                   CRE_DT,
                   UPD_USR_ID,
                   UPD_DT,
                   ETV_CBAP_NEXTPORT,
                   ETV_CBAP_POR,
                   ETV_CBAP_GROUPCODE,
                   BIL_NO,
                   /* 2016.05.17 VGM ADD - 9015707 */
                   MEAS_WGT,
                   MEAS_MZD_CD,
                   MEAS_CERTI_NO,
                   MEAS_DT,
                   MEAS_PSON_SIG1,
                   MEAS_PSON_SIG2,
                   MEAS_PSON_SIG3,
                   MEAS_PSON_SIG4)
                VALUES
                  (HREC.H03,
                   GVSLCODE,
                   GVOYAGE,
                   CREC.F03,
                   CREC.F04,
                   CREC.F05,
                   CREC.F06,
                   CREC.F07,
                   CREC.F08,
                   CREC.F09,
                   CREC.F10,
                   CREC.F11,
                   CREC.F12,
                   CREC.F13,
                   CREC.F14,
                   CREC.F15,
                   CREC.F16,
                   CREC.F17,
                   CREC.F18,
                   CREC.F19,
                   CREC.F20,
                   CREC.F21,
                   CREC.F22,
                   CREC.F23,
                   CREC.F24,
                   CREC.F25,
                   CREC.F26,
                   CREC.F27,
                   CREC.F28,
                   CREC.F29,
                   CREC.F30,
                   CREC.F31,
                   CREC.F32,
                   CREC.F33,
                   CREC.F34,
                   CREC.F35,
                   CREC.F36,
                   CREC.F37,
                   CREC.F38,
                   CREC.F39,
                   CREC.F40,
                   CREC.F41,
                   CREC.F42,
                   CREC.F43,
                   CREC.F44,
                   CREC.F45,
                   CREC.F46,
                   CREC.F47,
                   CREC.F48,
                   CREC.F49,
                   CREC.F50,
                   CREC.F51,
                   CREC.F52,
                   '',
                   '',
                   '',
                   '',
                   CREC.F53,
                   CREC.F54,
                   CREC.F55,
                   CREC.F56,
                   CREC.F57,
                   CREC.F58,
                   CREC.F59,
                   CREC.F60,
                   CREC.F61,
                   CREC.F58 || CREC.F59,
                   '',
                   '',
                   'EDI',
                   SYSDATE,
                   'EDI',
                   SYSDATE,
                   CREC.F63,
                   CREC.F62,
                   '',
                   '',
                   /* 2016.05.17 VGM ADD - 9015707 */
                   CREC.F71,
                   CREC.F72,
                   CREC.F73,
                   CREC.F74,
                   CREC.F75,
                   CREC.F76,
                   CREC.F77,
                   CREC.F78);
                   
              
                -- SELECT SHIPPLAN DISCHARGE CONTAINER TABLE (BICT TERMINAL 06.10.04)
                CPLANCONTSQL := PKG_EDI_VESSEL.SHIPPLAN_DISCONT(GVSLVOY,
                                                                CREC.F26);
                IF CPLANCONTSQL IS NOT NULL THEN
                
                  -- DELETE SHIPPLAN DISCHARGE(CONTAINER)
                  DELETE FROM VSP_SHIP
                   WHERE VSP_SHP_VESSEL = GVSLCODE
                     AND VSP_SHP_VOYAGE = GVOYAGE
                     AND VSP_SHP_DISLOAD = 'D'
                     AND VSP_SHP_CONTNO = CREC.F26;
                
                  DELETE FROM VSP_SHIP
                   WHERE VSP_SHP_VESSEL = GVSLCODE
                     AND VSP_SHP_VOYAGE = GVOYAGE
                     AND VSP_SHP_DISLOAD = 'L'
                     AND VSP_SHP_CONTNO = CREC.F26
                     AND VSP_SHP_CLASS IN ('S1', 'S2');
                END IF;
              
                -- OVERSTORAGE(VALUE)
                IF CREC.F07 IS NULL AND CREC.F09 IS NULL AND
                   CREC.F11 IS NULL AND CREC.F13 IS NULL AND
                   CREC.F15 IS NULL THEN
                  GOVERVALUE := '';
                ELSE
                  GOVERVALUE := CREC.F07 || '/' || CREC.F09 || '/' ||
                                CREC.F11 || '/' || CREC.F13 || '/' ||
                                CREC.F15;
                END IF;
                GWEIGHT := TO_CHAR(TO_NUMBER(CREC.F05));
                IF CREC.F17 IS NULL THEN
                  GTEMPER := '';
                ELSE
                  GTEMPER := SUBSTR(TO_CHAR(TO_NUMBER(CREC.F17)), 1, 5);
                END IF;
              
                -- INSERT (VSP_SHIP)
                INSERT INTO VSP_SHIP
                  (VSP_SHP_VESSEL,
                   VSP_SHP_VOYAGE,
                   VSP_SHP_DISLOAD,
                   VSP_SHP_EXTJOB,
                   VSP_SHP_STOWAGE,
                   VSP_SHP_DH,
                   VSP_SHP_INTSTOW,
                   VSP_SHP_SHFTSTWG,
                   VSP_SHP_CONTNO,
                   VSP_SHP_CLASS,
                   VSP_SHP_STATUS,
                   VSP_SHP_ISO,
                   VSP_SHP_COMMODITY,
                   VSP_SHP_WEIGHT,
                   VSP_SHP_TEMPER,
                   VSP_SHP_HAZAIMDG,
                   VSP_SHP_OPERATOR,
                   VSP_SHP_CONTTYPE,
                   VSP_SHP_OVERSLOT,
                   VSP_SHP_OVERVALUE,
                   VSP_SHP_PLANST,
                   VSP_SHP_DIRECT,
                   VSP_SHP_NEXTVESSEL,
                   VSP_SHP_NEXTVOYAGE,
                   VSP_SHP_DISCHPORT,
                   VSP_SHP_ORGINPORT,
                   VSP_SHP_FINALPORT,
                   VSP_SHP_SPECIALTYPE,
                   VSP_SHP_POR,
                   VSP_SHP_NEXTPORT,
                   BIL_NO,
                   PGM_ID)
                
                VALUES
                  (GVSLCODE,
                   GVOYAGE,
                   'D',
                   GEXTJOB,
                   CREC.F03,
                   GDH,
                   GINTSTOW,
                   '',
                   CREC.F26,
                   CREC.F29,
                   CREC.F28,
                   CREC.F27,
                   CREC.F50,
                   GWEIGHT,
                   GTEMPER,
                   CREC.F40,
                   CREC.F48,
                   CREC.F54,
                   CREC.F49,
                   GOVERVALUE,
                   'B',
                   '',
                   '',
                   '',
                   CREC.F21,
                   CREC.F20,
                   CREC.F22,
                   CREC.F56,
                   CREC.F62,
                   CREC.F63,
                   '',
                   'BAPLIE');
              
              END IF;
            END IF;
          
          END IF; -- END OF ERRPART(TRUE)
        
        END IF; --END OF CONTAINER NULL
        /* ========================================================= */
      
      END IF; -- END OF OVERSLOT
    
    END IF; -- END OF FILE READ
  
  END LOOP; -- END OF LOOP

  /* ============  EDI FILE STATUS (UPDATE) ======================== */
  IF PCNT = 0 THEN
    IF HREC.R03 = '3' THEN
      XFILESTAT := 'CL'; -- MESSAGE CANCEL(DELETE)
    ELSE
      XFILESTAT := 'NP'; -- NOT PROCESSED
    END IF;
  ELSE
    IF RCNT = PCNT THEN
      XFILESTAT := 'AP'; -- PROCESSED ALL
    ELSIF RCNT > PCNT THEN
      XFILESTAT := 'PP'; -- PARTLY PROCESSED
    END IF;
  END IF;

  UPDATE ETC_STATUS
     SET ETC_ST_ACCEDATE = XACCDATE,
         ETC_ST_ACCETIME = XACCTIME,
         ETC_ST_PRCSSTAT = XFILESTAT,
         ETC_ST_STATPARA = GVSLVOY,
         ETC_ST_RECVCONT = RCNT,
         ETC_ST_PRCSCONT = PCNT,
         ETC_ST_MOVEFLAG = SMOVEFLAG
   WHERE ETC_ST_EDOCID = HREC.H01
     AND ETC_ST_FILENAME = P_FILENAME;
  /* ============================================================== */

  COMMIT; -- ALL DATA COMMIT
  /* =============1)FILE STAT 2)ERROR LIST 3)BAPLIE =============== */

  UTL_FILE.FCLOSE(SFILE_HANDLE);

  /* ==== DG MANIFEST (CONFIRM LOCATION ALLOCATE) ==================== */
  -- 2006.10.13 : J.M.Son : DG MANIFEST(CONFIRM LOCATION ALLOCATE)
  IF HREC.H01 = 'BAPLIE' THEN
    -- PRO_EDI_DGMNFT_AUTOLOC(HREC.H01, gVSLCODE, gVOYAGE,NULL);
    NULL;
  END IF;
  /* ===================================================================*/

  /* == JOB_QUEUE_SCHEDULE (HJNC:JOB_QUEUE)================*/
  PRO_JOBQUEUE_SKD(GVSLCODE, GVOYAGE);

  -- ADD CUSTOMS PROCESS(2009.05.02)
  --PKG_MANIFEST.SET_AUTO_MANUAL_BAPLIE(gVSLCODE, gVOYAGE);

EXCEPTION
  WHEN UTL_FILE.INVALID_OPERATION THEN
    IF UTL_FILE.IS_OPEN(SFILE_HANDLE) THEN
      UTL_FILE.FCLOSE(SFILE_HANDLE);
    END IF;
    ROLLBACK;
    PKG_EDI.LOG(DEBUG, 'END : INVALID_OPERATION');
  WHEN UTL_FILE.INVALID_FILEHANDLE THEN
    IF UTL_FILE.IS_OPEN(SFILE_HANDLE) THEN
      UTL_FILE.FCLOSE(SFILE_HANDLE);
    END IF;
    ROLLBACK;
    PKG_EDI.LOG(DEBUG, 'END : INVALID_FILEHANDLE');
  WHEN UTL_FILE.READ_ERROR THEN
    IF UTL_FILE.IS_OPEN(SFILE_HANDLE) THEN
      UTL_FILE.FCLOSE(SFILE_HANDLE);
    END IF;
    ROLLBACK;
    PKG_EDI.LOG(DEBUG, 'END : READ_ERROR');
  WHEN UTL_FILE.ACCESS_DENIED THEN
    IF UTL_FILE.IS_OPEN(SFILE_HANDLE) THEN
      UTL_FILE.FCLOSE(SFILE_HANDLE);
    END IF;
    ROLLBACK;
    PKG_EDI.LOG(DEBUG, 'END : ACCESS_DENIED');
    PKG_EDI.LOG(DEBUG, 'sqlcode ' || TO_CHAR(SQLCODE));
    PKG_EDI.LOG(DEBUG, 'sqlerrm : ' || SQLERRM);
  WHEN UTL_FILE.INVALID_PATH THEN
    IF UTL_FILE.IS_OPEN(SFILE_HANDLE) THEN
      UTL_FILE.FCLOSE(SFILE_HANDLE);
    END IF;
    ROLLBACK;
    PKG_EDI.LOG(DEBUG, 'END : INVALID_PATH');
    PKG_EDI.LOG(DEBUG, 'sqlcode ' || TO_CHAR(SQLCODE));
    PKG_EDI.LOG(DEBUG, 'sqlerrm : ' || SQLERRM);
  WHEN OTHERS THEN
    IF UTL_FILE.IS_OPEN(SFILE_HANDLE) THEN
      UTL_FILE.FCLOSE(SFILE_HANDLE);
    END IF;
    ROLLBACK;
    PKG_EDI.LOG(DEBUG, 'END : Others Exception');
    PKG_EDI.LOG(DEBUG, 'sqlcode ' || TO_CHAR(SQLCODE));
    PKG_EDI.LOG(DEBUG, 'sqlerrm : ' || SQLERRM);

END PRO_EDI_BAPLIE;